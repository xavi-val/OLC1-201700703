

non terminal
/*Inicio*/
inicio,
/*Instrucciones*/
instruccion, lista_instrucciones,
/*Expresiones*/
expr,
/*Valores*/
valor,
/*Declaraciones*/
declaracion,lista_variables,lista_valores,
/*Comentario*/

/*Asignacion*/
asignar,
/*condicion*/
condicion, op_relacional, op_logico,
/*Condicionales*/
if, elseif, else,
/*SELECT CASE*/
select_case, list_case, default,
/*CICLO PARA*/
for, incremental,
/*CICLO MIENTRAS*/
mientras,
/*CICLO Repetir hasta*/
repetir,
/* RETORNO */
retorno,
/*METODO*/
metodo, con_parametros ,lista_parametros_con_tipo,
/*FUNCION*/
funcion,
/*EJECUTAR*/
ejecutar, lista_parametros,
/*IMPRIMIR*/
imprimir,
/*ERRORES*/
sincronizacion
;

terminal
/*Bloque principal o de inicio*/
INICIO,FIN,
/*Expresiones*/
SUMA,RESTA,MULTI,DIVI,POTENCIA,MODULO,LPAREN,RPAREN,LCOR,RCOR,
/*Valores*/
NUMERO, CADENA, BOOLEAN, CARACTER,
/*Declaracion*/
INGRESAR, VARIABLE, COMO, TIPO, CON_VALOR, COMA, SEMI_COLON,
/*Comentarios*/
COMENTARIO,
/*Asignacion*/
ASIGNACION,
/*Operadores relacionales y logicos*/
MAYOR, MENOR, MAYORIGUAL,MENORIGUAL,IGUAL,DIFERENTE,OR,AND,NOT,
/*Condicionales*/
IF,THEN,END_IF, ELSE, ELSE_IF,
/*SELECT -CASE*/
SELECT,CASE,END_SELECT,LQUE,RQUE,
/*FOR*/
FOR, TO, END_FOR, INCREMENTAL,
/*WHILE*/
WHILE, END_WHILE,
/*REPETIR HASTA QUE*/
REPETIR, HASTA_QUE,
/*RETORNO*/
RETURN,
/*METODO*/
METODO, FIN_METODO, CON_PARAMETROS,
/*FUNCION*/
FUNCTION, END_FUNCTION,
/*EJECUTAR*/
EJECUTAR,
IMPRIMIR,IMPRIMIR_SIN_SALTO,
/*ERROR*/
ERROR
;

/*Precedencia de operadores para expresiones*/
precedence left SUMA, RESTA;
precedence left MULTI, DIVI, MODULO;
precedence left POTENCIA;

/*Precedencia de operadores relacionales y logicos*/
precedence left MAYOR , MENOR , MAYORIGUAL , MENORIGUAL , IGUAL , DIFERENTE;
precedence left OR,AND;
precedence left NOT;

start with inicio;

sincronizacion ::=  SEMI_COLON
                |   COMENTARIO
                |   END_IF
                |   END_SELECT
                |   END_FOR
                |   END_WHILE
                |   FIN_METODO
                |   END_FUNCTION;

inicio ::= INICIO lista_instrucciones FIN;        


lista_instrucciones ::=  instruccion lista_instrucciones                     
                     | /*Vacio*/;

instruccion ::= declaracion            
            | asignar            
            | if            
            | select_case            
            | for            
            | mientras            
            | repetir            
            | metodo            
            | funcion            
            | ejecutar            
            | imprimir            
            | COMENTARIO            
            | error sincronizacion;
           


/*Valores*/
valor ::= CADENA 
        | condicion  /*condicion esta declarado mas abajo ðŸ‘‡ */
        | CARACTER 
        | expr ;        

/*Expresiones*/
expr ::= expr SUMA expr 
        |expr RESTA expr 
        |expr MULTI expr 
        |expr DIVI expr 
        |expr MODULO expr 
        |expr POTENCIA LCOR expr RCOR  
        |LPAREN expr RPAREN 
        |RESTA NUMERO 
        |NUMERO 
        |VARIABLE ;

/*Declaracion*/
lista_variables ::= VARIABLE COMA lista_variables 
                | VARIABLE ;

lista_valores ::= valor COMA lista_valores 
                | valor ;

declaracion ::= INGRESAR lista_variables COMO TIPO CON_VALOR lista_valores SEMI_COLON;

/*Asignacion*/
asignar ::= lista_variables ASIGNACION valor SEMI_COLON;

/*Condiciones*/

op_relacional ::= MAYOR                
                | MENOR                
                | MAYORIGUAL                
                | MENORIGUAL                
                | IGUAL
                | DIFERENTE;


op_logico ::= OR 
            |AND ;

condicion ::= valor op_relacional valor            
            | valor op_logico valor            
            | LPAREN condicion RPAREN            
            | NOT valor            
            | BOOLEAN;

/*IF*/

elseif ::= ELSE_IF valor THEN lista_instrucciones elseif        
        |  /*Vacio*/;

else ::= ELSE lista_instrucciones        
       |  /*Vacio*/;

if ::=  IF valor THEN lista_instrucciones elseif else END_IF;


/*SELECT CASE*/

list_case::= LQUE expr RQUE THEN lista_instrucciones list_case            
           |  /*Vacio*/ ;

default::=  ELSE THEN lista_instrucciones            
            |  /*Vacio*/;

select_case::= SELECT expr CASE list_case default END_SELECT;

incremental::= INCREMENTAL expr            
            |  /*Vacio*/;

for ::= FOR VARIABLE ASIGNACION expr TO expr incremental CASE lista_instrucciones END_FOR;

mientras ::= WHILE valor CASE lista_instrucciones END_WHILE;

repetir ::= REPETIR lista_instrucciones HASTA_QUE valor;

retorno ::= RETURN valor SEMI_COLON
        ;

lista_parametros_con_tipo ::=  VARIABLE TIPO COMA lista_parametros_con_tipo                      
                |     VARIABLE TIPO                      
                |   /*VACIO*/ ;

con_parametros::= CON_PARAMETROS LPAREN lista_parametros_con_tipo RPAREN                
                | /*VACIO*/ ;

metodo ::= METODO VARIABLE con_parametros lista_instrucciones FIN_METODO;

funcion ::= FUNCTION VARIABLE TIPO con_parametros lista_instrucciones retorno END_FUNCTION;

lista_parametros ::=  valor COMA lista_parametros                
                |     valor                    
                |   /*VACIO*/ ;

ejecutar ::= EJECUTAR VARIABLE LPAREN lista_parametros RPAREN SEMI_COLON;

imprimir ::= IMPRIMIR valor SEMI_COLON            
            | IMPRIMIR ejecutar            
            | IMPRIMIR_SIN_SALTO valor SEMI_COLON            
            | IMPRIMIR_SIN_SALTO ejecutar;