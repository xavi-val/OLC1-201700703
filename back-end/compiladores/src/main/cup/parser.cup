package com.backend.compiladores.services;

import java_cup.runtime.*;
import com.backend.compiladores.services.traductor.*;
import com.backend.compiladores.services.parserPackage.*;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;


class Parser;




//VIDEOS USADOS DE REFERENCIA

/*
https://youtu.be/R6znBEekUVA
https://youtu.be/4XKelO44u5U
https://youtu.be/4Z6Tnit810Y

AST (Abastact Syntax Tree)
https://youtu.be/kwG1ZOXUS4A

Documentacion sobre errores que puede dar JCUP
http://hackerdan.com/

*/

//TAMBIEN RECOMIENDO LEER LA DOCUMENTACION DE JFLEX Y CUP, ES LARGA PERO VALE LA PENA LEERLA

/*RESULT = *** DEVUELVE LA CADENA QUE HICO MATCH CON EL ANALISIS SINTACTICO, SI SOLICITAS EL MATCH
DE UN NO TERMINAL, AGARRA EL RESULT DE LAS DERIVACIONES DE ESE NO TERMINAL, EN CASO DE NO ENCONTRAR DERIVACION
CON UNA RESPUESTA RESULT= *** REGRESA UN OBJETO NULL
*/

/*
Documentacion comentarios hechos mas abajo

terminal indica un simbolo terminal
no terminal indica un simbolo no terminal
terminal-indirecto -> lo que hace el programa es reune toda la cadena de caracteres que viene del no terminal y lo junta en ese terminal indirecto


*/


parser code
{:
//HACER CASO OMISO A ESTOS ERRORES SI ESTAS USANDO INTELLIJ
//Reescritura de los metodos nativos de CUP para mi conveniencia
    public Symbol s;
    public LinkedList<String> p_list = new LinkedList();

    //Asigna el token de error para despues poder sacarlo con el get
    public void syntax_error(Symbol s){
        this.s = s;
        this.report_expected_token_ids();
    }

    //Sacamos el token que da error
    public Symbol getSymbolError(){
        return this.s;

    }


    //CUP nos da una lista de los posibles token que se esperaban
    protected void report_expected_token_ids() {
        List<Integer> ids = this.expected_token_ids();
        LinkedList<String> list = new LinkedList();
        Iterator var3 = ids.iterator();

        while(var3.hasNext()) {
            Integer expected = (Integer)var3.next();
            list.add(this.symbl_name_from_id(expected));
        }

        this.p_list=list;
    }

    //Sacamos esa lista
    public LinkedList<String> getExpectedTokens(){
            return this.p_list;
    }

    //-----------------------------------------------------------

    public Ast ast = new Ast();
    public long contador = 1;

    /*ARRAY OF OBJECT TO STRING = ats*/
    private String ats(Object[] array){
        String answer = "";

        for(int i = 0; i < array.length; i++) {
          answer+= array[i].toString();
        }

        return answer;
    }

:};


non terminal
/*Inicio*/
inicio,
/*Instrucciones*/
instruccion, lista_instrucciones,
/*Expresiones*/
expr,
/*Valores*/
valor,
/*Declaraciones*/
declaracion,lista_variables,lista_valores,
/*Comentario*/

/*Asignacion*/
asignar,
/*condicion*/
condicion, op_relacional, op_logico,
/*Condicionales*/
if, elseif, else,
/*SELECT CASE*/
select_case, list_case

;
terminal
/*Bloque principal o de inicio*/
INICIO,FIN,
/*Expresiones*/
SUMA,RESTA,MULTI,DIVI,POTENCIA,MODULO,LPAREN,RPAREN,
/*Valores*/
NUMERO, CADENA, BOOLEAN, CARACTER,
/*Declaracion*/
INGRESAR, VARIABLE, COMO, TIPO, CON_VALOR, COMA, SEMI_COLON,
/*Comentarios*/
COMENTARIO,
/*Asignacion*/
ASIGNACION,
/*Operadores relacionales y logicos*/
MAYOR, MENOR, MAYORIGUAL,MENORIGUAL,IGUAL,DIFERENTE,OR,AND,NOT,
/*Condicionales*/
IF,THEN,END_IF, ELSE, ELSE_IF,
/*SELECT -CASE*/
SELECT,CASE,DEFAULT,END_SELECT,LQUE,RQUE,

/*ERRORES*/
ERROR
;

/*Precedencia de operadores para expresiones*/
precedence left SUMA, RESTA;
precedence left MULTI, DIVI, MODULO;
precedence left POTENCIA;

/*Precedencia de operadores relacionales y logicos*/
precedence left MAYOR , MENOR , MAYORIGUAL , MENORIGUAL , IGUAL , DIFERENTE;
precedence left OR,AND;


start with inicio;

inicio ::= INICIO:e1 lista_instrucciones:e2 FIN:e3
        {:
            Nodo tmp = new Nodo("Global");
            tmp.setNumNodo(contador++);
            tmp.addHijo(new Nodo("Nodo inicio",e1.toString(),contador++));
            tmp.addHijo((Nodo) e2);
            tmp.addHijo(new Nodo("Nodo final", e3.toString(),contador++));
            ast.raiz = tmp;
            RESULT=tmp;
        :}
        |  ERROR:e1{::};


lista_instrucciones ::=  instruccion:e1 lista_instrucciones:e2
                     {:
                        Nodo tmp = new Nodo("instruccion");
                        tmp.setNumNodo(contador++);
                        tmp.addHijo((Nodo)e1);
                        tmp.addHijo((Nodo)e2);
                        RESULT=tmp;
                     :}
                     | /*Vacio*/;

instruccion ::= declaracion:e1
            {:RESULT=e1;:}
            | asignar:e2
            {:RESULT=e2;:}
            | if:e3
            {:RESULT=e3;:}
            | select_case:e3
            {:RESULT=e3;:}
            | COMENTARIO:e20
            {:
                Nodo tmp = new Nodo("comentario",e20.toString(),contador++);
                tmp.setNumNodo(contador++);
                RESULT=tmp;
            :};


/*Valores*/
valor ::= CADENA:e1 {: RESULT =  ats(new Object[] {e1}) ; :}
        | condicion:e2 {: RESULT = ats(new Object[] {e2}) ; :} /*condicion esta declarado mas abajo ðŸ‘‡ */
        | CARACTER:e3 {: RESULT = ats(new Object[] {e3}) ; :}
        | expr:e4 {: RESULT = ats(new Object[] {e4}) ; :};

/*Expresiones*/
expr ::= expr:e1 SUMA:e2 expr:e3 {:RESULT = ats(new Object[] {e1,e2,e3}) ;:}
        |expr:e1 RESTA:e2 expr:e3 {:RESULT = ats(new Object[] {e1,e2,e3}) ;:}
        |expr:e1 MULTI:e2 expr:e3 {:RESULT = ats(new Object[] {e1,e2,e3}) ;:}
        |expr:e1 DIVI:e2 expr:e3 {:RESULT = ats(new Object[] {e1,e2,e3}) ;:}
        |expr:e1 MODULO:e2 expr:e3 {:RESULT = ats(new Object[] {e1,e2,e3}) ;:}
        |expr:e1 POTENCIA:e2 expr:e3 {:RESULT = ats(new Object[] {e1,e2,e3}) ;:}
        |LPAREN:e1 expr:e2 RPAREN:e3 {:RESULT = ats(new Object[] {e1,e2,e3}) ;:}
        |RESTA:e1 NUMERO:e2 {:RESULT = ats(new Object[] {e1,e2}) ;:}
        |NUMERO:e1 {: RESULT = ats(new Object[] {e1}) ; :};

/*Declaracion*/
lista_variables ::= VARIABLE:e1 COMA:e2 lista_variables:e3 {: RESULT = ats(new Object[] {e1,e2,e3}) ;:}
                | VARIABLE:e1 {: RESULT = ats(new Object[] {e1}) ;:};

lista_valores ::= valor:e1 COMA:e2 lista_valores:e3 {: RESULT = ats(new Object[] {e1,e2,e3}) ;:}
                | valor:e1 {: RESULT = ats(new Object[] {e1}) ;:};

declaracion ::= INGRESAR:e1 lista_variables:e2 COMO:e3 TIPO:e4 CON_VALOR:e5 lista_valores:e6 SEMI_COLON:e7
{:
    Nodo tmp = new Nodo("Declaracion");
    tmp.setNumNodo(contador++);
    tmp.addHijo(new Nodo("Ingresar",e1.toString(),contador++)) /*terminal*/;
    tmp.addHijo(new Nodo("Variables",e2.toString(),contador++)) /*terminal-indirecto*/;
    tmp.addHijo(new Nodo("COMO",e3.toString(),contador++)) /*terminal*/;
    tmp.addHijo(new Nodo("TIPO",e4.toString(),contador++)) /*terminal*/;
    tmp.addHijo(new Nodo("CON_VALOR",e5.toString(),contador++)) /*terminal*/;
    tmp.addHijo(new Nodo("Valores",e6.toString(),contador++)) /*terminal-indirecto*/;
    tmp.addHijo(new Nodo(";",e7.toString(),contador++)) /*terminal*/;
    RESULT=tmp;
 :};

/*Asignacion*/
asignar ::= lista_variables:e1 ASIGNACION:e2 expr:e3 SEMI_COLON:e4
{:
    Nodo tmp = new Nodo("Asignacion");
    tmp.setNumNodo(contador++);
    tmp.addHijo(new Nodo("Variables",e1.toString(),contador++)) /*terminal-indirecto*/;
    tmp.addHijo(new Nodo("Asignar",e2.toString(),contador++)) /*terminal*/;
    tmp.addHijo(new Nodo("Expresion",e3.toString(),contador++)) /*terminal-indirecto*/;
    tmp.addHijo(new Nodo(";",e4.toString(),contador++)) /*terminal*/;
    RESULT=tmp;
:} ;

/*Condiciones*/

op_relacional ::= MAYOR:e1
                {:RESULT = ats(new Object[] {e1}) ;:}
                | MENOR:e1
                {:RESULT = ats(new Object[] {e1}) ;:}
                | MAYORIGUAL:e1
                {:RESULT = ats(new Object[] {e1}) ;:}
                | MENORIGUAL:e1
                {:RESULT = ats(new Object[] {e1}) ;:}
                | IGUAL:e1
                {:RESULT = ats(new Object[] {e1}) ;:}
                | DIFERENTE:e1
                {:RESULT = ats(new Object[] {e1}) ;:}
                ;
op_logico ::= OR:e1 {:RESULT = ats(new Object[] {e1}) ;:}
            |AND:e1 {:RESULT = ats(new Object[] {e1}) ;:};

condicion ::= VARIABLE:e1 op_relacional:e2 VARIABLE:e3
            {:RESULT = ats(new Object[] {e1,e2,e3}) ;:}
            | VARIABLE:e1 op_relacional:e2 expr:e3
            {:RESULT = ats(new Object[] {e1,e2,e3}) ;:}
            | expr:e1 op_relacional:e2 VARIABLE:e3
            {:RESULT = ats(new Object[] {e1,e2,e3}) ;:}
            | expr:e1 op_relacional:e2 expr:e3
            {:RESULT = ats(new Object[] {e1,e2,e3}) ;:}
            | condicion:e1 op_logico:e2 condicion:e3
            {:RESULT = ats(new Object[] {e1,e2,e3}) ;:}
            | NOT:e1 condicion:e2
            {:RESULT = ats(new Object[] {e1,e2}) ;:}
            | BOOLEAN:e1
            {:RESULT = ats(new Object[] {e1}) ;:};

/*IF*/


elseif ::= ELSE_IF:e1 condicion:e2 THEN:e3 lista_instrucciones:e4 elseif:e5
        {:
            Nodo tmp = new Nodo("ELSE_IF",e1.toString(),contador++);
            tmp.setNumNodo(contador++);
            tmp.addHijo(new Nodo("condicion",e2.toString(),contador++)) /*terminal*/;
            tmp.addHijo(new Nodo("THEN",e3.toString(),contador++)) /*terminal*/;
            tmp.addHijo((Nodo)e4);
            if(e5.toString()!=""){
                tmp.addHijo((Nodo)e5);
            }
            RESULT=tmp;
        :}
        | {:RESULT="";:} /*Vacio*/;

else ::= ELSE:e1 lista_instrucciones:e2
        {:
            Nodo tmp = new Nodo("ELSE",e1.toString(),contador++);
            tmp.setNumNodo(contador++);
            tmp.addHijo((Nodo)e2);
        :}
       | {:RESULT="";:} /*Vacio*/;

if ::=  IF:e1 condicion:e2 THEN:e3 lista_instrucciones:e4 END_IF:e5
    {:
        Nodo tmp = new Nodo("IF",e1.toString(),contador++);
        tmp.setNumNodo(contador++);
        tmp.addHijo(new Nodo("condicion",e2.toString(),contador++)) /*terminal*/;
        tmp.addHijo(new Nodo("THEN",e3.toString(),contador++)) /*terminal*/;
        tmp.addHijo((Nodo)e4);
        tmp.addHijo(new Nodo("END_IF",e5.toString(),contador++)) /*terminal*/;
        RESULT=tmp;
    :}
    |   IF:e1 condicion:e2 lista_instrucciones:e3 elseif:e4 else:e5 END_IF:e6
    {:
        Nodo tmp = new Nodo("IF",e1.toString(),contador++);
        tmp.setNumNodo(contador++);
        tmp.addHijo(new Nodo("condicion",e2.toString(),contador++)) /*terminal*/;
        tmp.addHijo((Nodo)e3);
        if(e4.toString()!=""){
            tmp.addHijo((Nodo)e4); /*No terminal*/
        }
        if(e5.toString()!=""){
            tmp.addHijo((Nodo)e5);
        }
        tmp.addHijo(new Nodo("END_IF",e6.toString(),contador++)) /*terminal*/;
        RESULT=tmp;
    :};


/*SELECT CASE*/
list_case::= LQUE NUMERO RQUE THEN lista_instrucciones list_case
            | /*VACIO*/;

select_case::= SELECT NUMERO CASE list_case DEFAULT lista_instrucciones END_SELECT;