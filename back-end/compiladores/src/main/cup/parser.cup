package com.backend.compiladores.services;

import java_cup.runtime.*;
import com.backend.compiladores.services.traductor.*;

class Parser;

//VIDEOS USADOS DE REFERENCIA

/*
https://youtu.be/R6znBEekUVA
https://youtu.be/4XKelO44u5U
https://youtu.be/4Z6Tnit810Y

*/

//TAMBIEN RECOMIENDO LEER LA DOCUMENTACION DE JFLEX Y CUP, ES LARGA PERO VALE LA PENA LEERLA

/*RESULT = *** DEVUELVE LA CADENA QUE HICO MATCH CON EL ANALISIS SINTACTICO, SI SOLICITAS EL MATCH
DE UN NO TERMINAL, AGARRA EL RESULT DE LAS DERIVACIONES DE ESE NO TERMINAL, EN CASO DE NO ENCONTRAR DERIVACION
CON UNA RESPUESTA RESULT= *** REGRESA UN OBJETO NULL
*/


parser code
{:
//HACER CASO OMISO A ESTOS ERRORES SI ESTAS USANDO INTELLIJ
    private Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

    public Traductor traductor;

    /*ARRAY OF OBJECT TO STRING = ats*/
    private String ats(Object[] array){
        String answer = "";

        for(int i = 0; i < array.length; i++) {
          answer+= array[i].toString();
        }

        return answer;
    }

:};


non terminal
/*Inicio*/
inicio,
/*Instrucciones*/
instruccion, lista_instrucciones,
/*Expresiones*/
expr,
/*Valores*/
valor,
/*Declaraciones*/
declaracion,lista_variables,lista_valores,
/*Comentario*/
comentario,
/*Asignacion*/
asignar,
/*condicion*/
condicion, op_relacional, op_logico
;
terminal
/*Bloque principal o de inicio*/
INICIO,FIN,
/*Expresiones*/
SUMA,RESTA,MULTI,DIVI,POTENCIA,MODULO,LPAREN,RPAREN,
/*Valores*/
NUMERO, CADENA, BOOLEAN, CARACTER,
/*Declaracion*/
INGRESAR, VARIABLE, COMO, TIPO, CON_VALOR, COMA,
/*Comentarios*/
COMENTARIO,
/*Asignacion*/
ASIGNACION,
/*Operadores relacionales y logicos*/
MAYOR, MENOR, MAYORIGUAL,MENORIGUAL,IGUAL,DIFERENTE,OR,AND,NOT
;

/*Precedencia de operadores para expresiones*/
precedence left SUMA, RESTA;
precedence left MULTI, DIVI, MODULO;
precedence left POTENCIA;

/*Precedencia de operadores relacionales y logicos*/
precedence left MAYOR , MENOR , MAYORIGUAL , MENORIGUAL , IGUAL , DIFERENTE;
precedence left OR,AND;


start with inicio;

inicio ::= INICIO:e1 lista_instrucciones FIN {: traductor.inicio(e1.toString()); :}
        |  comentario inicio;


lista_instrucciones ::=  instruccion:b lista_instrucciones {:  :}
                    | /*Vacio*/;

instruccion ::= declaracion
            | asignar
            | comentario;

/*Comentarios*/
comentario ::= COMENTARIO:a {: traductor.comentario(a.toString()); :};

/*Valores*/
valor ::= CADENA:e1 {: RESULT = e1.toString(); :}
        | BOOLEAN:e2{: RESULT = e2.toString(); :}
        | CARACTER:e3{: RESULT = e3.toString(); :}
        | expr:e4{:RESULT = e4.toString();:};

/*Expresiones*/
expr ::= expr:e1 SUMA:e2 expr:e3 {:RESULT = ats(new Object[] {e1,e2,e3}) ;:}
        |expr:e1 RESTA:e2 expr:e3 {:RESULT = ats(new Object[] {e1,e2,e3}) ;:}
        |expr:e1 MULTI:e2 expr:e3 {:RESULT = ats(new Object[] {e1,e2,e3}) ;:}
        |expr:e1 DIVI:e2 expr:e3 {:RESULT = ats(new Object[] {e1,e2,e3}) ;:}
        |expr:e1 MODULO:e2 expr:e3 {:RESULT = ats(new Object[] {e1,e2,e3}) ;:}
        |expr:e1 POTENCIA:e2 expr:e3 {:RESULT = ats(new Object[] {e1,e2,e3}) ;:}
        |LPAREN:e1 expr:e2 RPAREN:e3 {:RESULT = ats(new Object[] {e1,e2,e3}) ;:}
        |RESTA:e1 NUMERO:e2 {:RESULT = ats(new Object[] {e1,e2}) ;:}
        |NUMERO:e1 {: RESULT = ats(new Object[] {e1}) ; :};

/*Declaracion*/
lista_variables ::= VARIABLE:e1 COMA:e2 lista_variables:e3 {: RESULT = e1.toString() + e2.toString() + e3.toString(); :}
                | VARIABLE:e1 {: RESULT = e1.toString(); :};

lista_valores ::= valor:e1 COMA:e2 lista_valores:e3 {: RESULT = e1.toString() + e2.toString() + e3.toString(); :}
                | valor:e1 {: RESULT = e1.toString(); :};

declaracion ::= INGRESAR lista_variables:e1 COMO TIPO CON_VALOR:e2 lista_valores:e3
{: traductor.declaracion_asignacion(ats(new Object[] {e1,e2,e3}));:};

/*Asignacion*/
asignar ::= lista_variables ASIGNACION expr;

/*Condiciones*/

op_relacional ::= MAYOR | MENOR | MAYORIGUAL | MENORIGUAL | IGUAL | DIFERENTE;
op_logico ::= OR|AND;

condicion ::= expr op_relacional expr
            | condicion op_logico condicion
            | NOT condicion;

