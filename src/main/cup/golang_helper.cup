package com.backend.compiladores.services.helper;

import java_cup.runtime.*;
import com.backend.compiladores.services.traductor.*;
import com.backend.compiladores.services.parserPackage.*;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;


class golang_helper;


parser code
{:
//HACER CASO OMISO A ESTOS ERRORES SI ESTAS USANDO INTELLIJ
//Reescritura de los metodos nativos de CUP para mi conveniencia
    public Symbol s;
    public LinkedList<String> p_list = new LinkedList();
    public String valor="";

    //Asigna el token de error para despues poder sacarlo con el get
    public void syntax_error(Symbol s){
        this.s = s;
        this.report_expected_token_ids();
    }

    //Sacamos el token que da error
    public Symbol getSymbolError(){
        return this.s;

    }


    //CUP nos da una lista de los posibles token que se esperaban
    protected void report_expected_token_ids() {
        List<Integer> ids = this.expected_token_ids();
        LinkedList<String> list = new LinkedList();
        Iterator var3 = ids.iterator();

        while(var3.hasNext()) {
            Integer expected = (Integer)var3.next();
            list.add(this.symbl_name_from_id(expected));
        }

        this.p_list=list;
    }

    //Sacamos esa lista
    public LinkedList<String> getExpectedTokens(){
            return this.p_list;
    }

    //-----------------------------------------------------------

    public Ast ast = new Ast();
    public long contador = 1;

    /*ARRAY OF OBJECT TO STRING = ats*/
    private String ats(Object[] array){
        String answer = "";

        for(int i = 0; i < array.length; i++) {
          answer+= array[i].toString();
        }

        return answer;
    }

:};


non terminal
/*Inicio*/
inicio,
/*Instrucciones*/
instruccion, lista_instrucciones,
/*Expresiones*/
expr,
/*Valores*/
valor,
/*Declaraciones*/
declaracion,lista_variables,lista_valores,
/*Comentario*/

/*Asignacion*/
asignar,
/*condicion*/
condicion, op_relacional, op_logico,
/*Condicionales*/
if, elseif, else,
/*SELECT CASE*/
select_case, list_case, default,
/*CICLO PARA*/
for, incremental,
/*CICLO MIENTRAS*/
mientras,
/*CICLO Repetir hasta*/
repetir,
/* RETORNO */
retorno,
/*METODO*/
metodo, con_parametros ,lista_parametros_con_tipo,
/*FUNCION*/
funcion,
/*EJECUTAR*/
ejecutar, lista_parametros,
/*IMPRIMIR*/
imprimir

;
terminal
/*Bloque principal o de inicio*/
INICIO,FIN,
/*Expresiones*/
SUMA,RESTA,MULTI,DIVI,POTENCIA,MODULO,LPAREN,RPAREN,LCOR,RCOR,
/*Valores*/
NUMERO, CADENA, BOOLEAN, CARACTER,
/*Declaracion*/
INGRESAR, VARIABLE, COMO, TIPO, CON_VALOR, COMA, SEMI_COLON,
/*Comentarios*/
COMENTARIO,
/*Asignacion*/
ASIGNACION,
/*Operadores relacionales y logicos*/
MAYOR, MENOR, MAYORIGUAL,MENORIGUAL,IGUAL,DIFERENTE,OR,AND,NOT,
/*Condicionales*/
IF,THEN,END_IF, ELSE, ELSE_IF,
/*SELECT -CASE*/
SELECT,CASE,END_SELECT,LQUE,RQUE,
/*FOR*/
FOR, TO, END_FOR, INCREMENTAL,
/*WHILE*/
WHILE, END_WHILE,
/*REPETIR HASTA QUE*/
REPETIR, HASTA_QUE,
/*RETORNO*/
RETURN,
/*METODO*/
METODO, FIN_METODO, CON_PARAMETROS,
/*FUNCION*/
FUNCTION, END_FUNCTION,
/*EJECUTAR*/
EJECUTAR,
IMPRIMIR,IMPRIMIR_SIN_SALTO,
/*ERRORES*/
ERROR,
/*OTROS*/
FLOAT
;

/*Precedencia de operadores para expresiones*/
precedence left SUMA, RESTA;
precedence left MULTI, DIVI, MODULO;
precedence left POTENCIA;

/*Precedencia de operadores relacionales y logicos*/
precedence left MAYOR , MENOR , MAYORIGUAL , MENORIGUAL , IGUAL , DIFERENTE;
precedence left OR,AND;
precedence left NOT;


start with lista_valores;


/*Valores*/
valor ::= CADENA:e1 {: RESULT =  ats(new Object[] {e1}) ; :}
        | condicion:e2 {: RESULT = ats(new Object[] {e2}) ; :}
        | CARACTER:e3 {: RESULT = ats(new Object[] {e3}) ; :}
        | expr:e4 {: RESULT = ats(new Object[] {e4}) ; :};


/*Expresiones*/
expr ::= expr:e1 SUMA:e2 expr:e3 {:RESULT = ats(new Object[] {e1,e2,e3}) ;:}
        |expr:e1 RESTA:e2 expr:e3 {:RESULT = ats(new Object[] {e1,e2,e3}) ;:}
        |expr:e1 MULTI:e2 expr:e3 {:RESULT = ats(new Object[] {e1,e2,e3}) ;:}
        |expr:e1 DIVI:e2 expr:e3 {:RESULT = ats(new Object[] {e1,e2,e3}) ;:}
        |expr:e1 MODULO:e2 expr:e3 {:RESULT = ats(new Object[] {e1,e2,e3}) ;:}
        |expr:e1 POTENCIA:e2 LCOR:e3 expr:e4 RCOR:e5
        {:RESULT = "math.Pow(float64("+e1.toString() + "),float64(" + e4.toString() + "))" ;:}
        |LPAREN:e1 expr:e2 RPAREN:e3 {:RESULT = ats(new Object[] {e1,e2,e3}) ;:}
        |RESTA:e1 NUMERO:e2 {:RESULT = ats(new Object[] {e1,e2}) ;:}
        |NUMERO:e1 {: RESULT = ats(new Object[] {e1}) ; :}
        |VARIABLE:e1 {: RESULT = ats(new Object[] {e1}) ; :};

lista_valores ::= valor:e1 COMA:e2 lista_valores:e3 {: valor = ats(new Object[] {e1,e2,e3}) ;:}
                | valor:e1 {: valor =  ats(new Object[] {e1}) ;:};


/*Condiciones*/
op_relacional ::= MAYOR:e1
                {:RESULT = ats(new Object[] {e1}) ;:}
                | MENOR:e1
                {:RESULT = ats(new Object[] {e1}) ;:}
                | MAYORIGUAL:e1
                {:RESULT = ats(new Object[] {e1}) ;:}
                | MENORIGUAL:e1
                {:RESULT = ats(new Object[] {e1}) ;:}
                | IGUAL:e1
                {:RESULT = ats(new Object[] {e1}) ;:}
                | DIFERENTE:e1
                {:RESULT = ats(new Object[] {e1}) ;:}
                ;
op_logico ::= OR:e1 {:RESULT = ats(new Object[] {e1}) ;:}
            |AND:e1 {:RESULT = ats(new Object[] {e1}) ;:};

condicion ::=
             valor:e1 op_relacional:e2 valor:e3
            {:RESULT = ats(new Object[] {e1,e2,e3}) ;:}
            | valor:e1 op_logico:e2 valor:e3
            {:RESULT = ats(new Object[] {e1,e2,e3}) ;:}
            | LPAREN:e1 condicion:e2 RPAREN:e3
            {:RESULT = ats(new Object[] {e1,e2,e3}) ;:}
            | NOT:e1 valor:e2
            {:RESULT = ats(new Object[] {e1,e2}) ;:}
            | BOOLEAN:e1
            {:RESULT = ats(new Object[] {e1}) ;:};