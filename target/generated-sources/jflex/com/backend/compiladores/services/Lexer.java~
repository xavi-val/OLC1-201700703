// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/jflex/instructions.flex

package com.backend.compiladores.services;

import java_cup.runtime.*;
import com.backend.compiladores.services.ParserSym;import java.util.LinkedList;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\0"+
    "\1\6\1\0\1\7\2\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\12\21\1\0\1\22"+
    "\2\0\1\23\1\24\1\0\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\2\37\1\53\1\37\1\54\1\0\1\55"+
    "\1\0\1\56\1\0\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\2\37\1\53\1\37\1\57\1\0\1\60\7\0"+
    "\1\3\71\0\1\61\1\0\1\62\30\0\1\63\6\0"+
    "\1\62\30\0\1\63\65\0\2\64\115\0\1\65\u01a8\0"+
    "\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\17\1\1\15"+
    "\1\16\1\1\1\17\1\0\1\20\2\0\1\21\1\0"+
    "\1\22\25\0\1\23\5\0\1\24\2\0\1\25\2\0"+
    "\2\22\1\12\1\26\12\0\1\27\12\0\1\30\1\31"+
    "\10\0\1\32\4\0\1\33\24\0\1\34\1\35\20\0"+
    "\1\36\5\0\1\37\1\40\3\0\1\41\1\42\6\0"+
    "\1\43\2\0\1\44\16\0\1\45\4\0\1\46\2\0"+
    "\1\47\23\0\1\50\7\0\1\51\6\0\1\52\1\53"+
    "\1\0\1\54\3\0\1\55\2\0\1\56\1\57\2\0"+
    "\1\60\1\61\1\62\2\0\1\63\5\0\1\64\1\65"+
    "\10\0\1\66\10\0\1\67\1\0\1\70\5\0\1\71"+
    "\1\72\5\0\1\73\1\74\1\0\1\75\1\0\1\76"+
    "\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\66\0\154\0\242\0\66\0\66\0\66"+
    "\0\66\0\66\0\330\0\u010e\0\u0144\0\66\0\66\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a"+
    "\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\66\0\66"+
    "\0\u04a4\0\66\0\154\0\66\0\u04da\0\u0510\0\66\0\u0546"+
    "\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6"+
    "\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6"+
    "\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\66\0\u0a20"+
    "\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\66\0\u0b2e\0\u0b64\0\66"+
    "\0\u0b9a\0\u0bd0\0\66\0\u0c06\0\u05b2\0\66\0\u0c3c\0\u0c72"+
    "\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22"+
    "\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2"+
    "\0\u1008\0\u103e\0\u1074\0\66\0\66\0\u10aa\0\u10e0\0\u1116"+
    "\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\66\0\u125a\0\u1290"+
    "\0\u12c6\0\u12fc\0\66\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a"+
    "\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba"+
    "\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734\0\66"+
    "\0\66\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878\0\u18ae"+
    "\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e"+
    "\0\u1a94\0\66\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\66"+
    "\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52"+
    "\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\66\0\u1e60\0\u1e96\0\66"+
    "\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046"+
    "\0\u207c\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a\0\66\0\u21c0"+
    "\0\u21f6\0\u222c\0\u2262\0\66\0\u2298\0\u22ce\0\66\0\u2304"+
    "\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u2448\0\u247e\0\u24b4"+
    "\0\u24ea\0\u2520\0\u2556\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664"+
    "\0\u269a\0\u26d0\0\66\0\u2706\0\u273c\0\u2772\0\u27a8\0\u27de"+
    "\0\u2814\0\u284a\0\66\0\u2880\0\u28b6\0\u28ec\0\u2922\0\u2958"+
    "\0\u298e\0\66\0\66\0\u29c4\0\66\0\u29fa\0\u2a30\0\u2a66"+
    "\0\66\0\u2a9c\0\u2ad2\0\u2b08\0\66\0\u2b3e\0\u2b74\0\66"+
    "\0\66\0\66\0\u2baa\0\u2be0\0\66\0\u2c16\0\u2c4c\0\u2c82"+
    "\0\u2cb8\0\u2cee\0\66\0\66\0\u2d24\0\u2d5a\0\u2d90\0\u2dc6"+
    "\0\u2dfc\0\u2e32\0\u2e68\0\u2e9e\0\66\0\u2ed4\0\u2f0a\0\u2f40"+
    "\0\u2f76\0\u2fac\0\u2fe2\0\u3018\0\u304e\0\66\0\u3084\0\66"+
    "\0\u30ba\0\u30f0\0\u3126\0\u315c\0\u3192\0\66\0\66\0\u31c8"+
    "\0\u31fe\0\u3234\0\u326a\0\u32a0\0\66\0\66\0\u32d6\0\66"+
    "\0\u330c\0\66\0\66";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\2\3\1\4\1\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\2\1\14\1\15"+
    "\1\16\1\2\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\2\1\26\1\27\3\2\1\30\1\31\1\32"+
    "\1\33\1\2\1\34\1\35\2\2\1\36\1\2\1\37"+
    "\1\40\1\41\2\2\1\42\2\2\1\27\1\35\66\0"+
    "\6\43\1\44\57\43\2\45\3\0\2\45\1\46\56\45"+
    "\23\0\1\47\55\0\1\50\4\0\1\51\64\0\1\52"+
    "\1\0\1\15\106\0\1\53\66\0\1\54\47\0\1\55"+
    "\15\0\1\56\53\0\1\57\72\0\1\60\3\0\1\61"+
    "\4\0\1\62\15\0\1\62\25\0\1\63\7\0\1\64"+
    "\13\0\1\65\12\0\1\64\26\0\1\66\101\0\1\67"+
    "\1\70\50\0\1\71\3\0\1\72\3\0\1\73\5\0"+
    "\1\74\20\0\1\73\44\0\1\75\5\0\1\76\11\0"+
    "\1\76\50\0\1\77\7\0\1\100\34\0\1\101\15\0"+
    "\1\102\53\0\1\103\65\0\1\104\3\0\1\105\26\0"+
    "\1\105\32\0\1\106\61\0\27\107\22\0\1\110\65\0"+
    "\1\110\46\0\1\111\6\0\13\50\1\112\52\50\2\51"+
    "\1\113\1\51\1\114\61\51\21\0\1\115\74\0\1\116"+
    "\100\0\1\117\52\0\1\120\15\0\1\121\60\0\1\122"+
    "\1\123\101\0\1\124\40\0\1\125\104\0\1\126\73\0"+
    "\1\127\47\0\1\130\67\0\1\131\65\0\1\132\52\0"+
    "\1\133\17\0\1\134\15\0\1\134\44\0\1\135\54\0"+
    "\1\136\1\0\1\137\26\0\1\137\54\0\1\140\54\0"+
    "\1\141\5\0\1\142\46\0\1\143\64\0\1\144\105\0"+
    "\1\145\56\0\1\146\73\0\1\147\15\0\1\147\46\0"+
    "\1\150\67\0\1\151\61\0\1\152\3\0\1\153\50\0"+
    "\1\154\100\0\1\155\40\0\1\107\3\0\27\107\2\0"+
    "\1\156\30\0\1\157\44\0\13\50\1\112\4\50\1\113"+
    "\45\50\2\0\1\113\123\0\1\160\56\0\1\161\61\0"+
    "\1\162\34\0\1\162\46\0\1\163\27\0\1\164\50\0"+
    "\1\165\47\0\1\166\54\0\1\167\101\0\1\170\52\0"+
    "\1\171\4\0\1\172\26\0\1\172\50\0\1\173\15\0"+
    "\1\173\56\0\1\174\36\0\1\175\67\0\1\176\104\0"+
    "\1\177\63\0\1\200\65\0\1\201\46\0\1\202\101\0"+
    "\1\203\65\0\1\204\65\0\1\205\64\0\1\206\54\0"+
    "\1\207\71\0\1\210\26\0\1\210\26\0\1\211\71\0"+
    "\1\212\65\0\1\213\77\0\1\214\73\0\1\215\44\0"+
    "\1\216\56\0\1\157\36\0\1\45\36\0\1\217\76\0"+
    "\1\220\52\0\1\221\73\0\1\222\26\0\1\222\45\0"+
    "\1\223\5\0\1\224\56\0\1\225\73\0\1\226\56\0"+
    "\1\227\60\0\1\230\26\0\1\230\34\0\1\231\75\0"+
    "\1\232\54\0\1\233\6\0\1\234\2\0\1\235\2\0"+
    "\1\236\15\0\1\236\35\0\1\237\26\0\1\237\47\0"+
    "\1\240\44\0\1\241\75\0\1\242\26\0\1\242\32\0"+
    "\1\243\71\0\1\244\26\0\1\244\47\0\1\245\65\0"+
    "\1\246\47\0\1\247\105\0\1\250\63\0\1\251\61\0"+
    "\1\252\73\0\1\253\63\0\1\254\61\0\1\255\50\0"+
    "\1\256\65\0\1\257\65\0\1\260\110\0\1\261\57\0"+
    "\1\262\50\0\1\263\65\0\1\264\116\0\1\265\57\0"+
    "\1\266\44\0\1\267\70\0\1\270\104\0\1\271\65\0"+
    "\1\272\45\0\1\273\3\0\1\274\26\0\1\274\26\0"+
    "\1\275\71\0\1\276\3\0\1\277\26\0\1\277\44\0"+
    "\1\300\100\0\1\301\50\0\1\302\73\0\1\303\15\0"+
    "\1\303\43\0\1\304\100\0\1\305\65\0\1\306\52\0"+
    "\1\307\70\0\1\310\62\0\1\260\51\0\1\311\73\0"+
    "\1\312\26\0\1\312\43\0\1\313\53\0\1\314\77\0"+
    "\1\260\54\0\1\315\63\0\1\316\104\0\1\317\57\0"+
    "\1\320\54\0\1\321\63\0\1\322\71\0\1\323\65\0"+
    "\1\324\61\0\1\325\102\0\1\326\73\0\1\327\46\0"+
    "\1\330\102\0\1\331\52\0\1\332\74\0\1\333\70\0"+
    "\1\334\55\0\1\335\26\0\1\335\26\0\1\336\103\0"+
    "\1\337\65\0\1\340\47\0\1\341\75\0\1\342\26\0"+
    "\1\342\47\0\1\343\44\0\1\344\71\0\1\345\102\0"+
    "\1\260\65\0\1\346\44\0\1\347\103\0\1\350\65\0"+
    "\1\351\70\0\1\352\66\0\1\353\15\0\1\353\46\0"+
    "\1\354\57\0\1\355\54\0\1\356\101\0\1\357\64\0"+
    "\1\360\50\0\1\361\111\0\1\362\65\0\1\363\62\0"+
    "\1\364\65\0\1\365\75\0\1\366\65\0\1\367\56\0"+
    "\1\370\15\0\1\370\25\0\1\371\106\0\1\372\65\0"+
    "\1\173\50\0\1\373\75\0\1\374\72\0\1\375\61\0"+
    "\1\376\54\0\1\377\71\0\1\u0100\26\0\1\u0100\31\0"+
    "\1\u0101\105\0\1\u0102\57\0\1\u0103\54\0\1\u0104\112\0"+
    "\1\u0105\44\0\1\u0106\26\0\1\u0106\36\0\1\u0107\26\0"+
    "\1\u0107\42\0\1\u0108\55\0\1\u0109\104\0\1\u010a\57\0"+
    "\1\u010b\66\0\1\u010c\65\0\1\u010d\70\0\1\u010e\61\0"+
    "\1\u010f\56\0\1\u0110\65\0\1\u0111\63\0\1\u0112\104\0"+
    "\1\u0113\63\0\1\u0114\67\0\1\u0115\57\0\1\u0116\50\0"+
    "\1\u0117\100\0\1\u0118\76\0\1\u0119\65\0\1\u011a\56\0"+
    "\1\u011b\71\0\1\u011c\44\0\1\u011d\71\0\1\u011e\103\0"+
    "\1\u011f\15\0\1\u011f\25\0\1\u0120\65\0\1\u0121\110\0"+
    "\1\u0122\60\0\1\u0123\70\0\1\u0124\57\0\1\u0125\65\0"+
    "\1\u0126\52\0\1\u0127\107\0\1\u0128\15\0\1\u0128\35\0"+
    "\1\u0129\26\0\1\u0129\41\0\1\u012a\70\0\1\u012b\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13122];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\5\11\3\1\2\11\17\1\2\11"+
    "\1\1\1\11\1\0\1\11\2\0\1\11\1\0\1\1"+
    "\25\0\1\11\5\0\1\11\2\0\1\11\2\0\1\11"+
    "\2\1\1\11\12\0\1\1\12\0\2\11\10\0\1\11"+
    "\4\0\1\11\24\0\2\11\20\0\1\11\5\0\1\11"+
    "\1\1\3\0\2\1\6\0\1\11\2\0\1\11\16\0"+
    "\1\11\4\0\1\11\2\0\1\11\23\0\1\11\7\0"+
    "\1\11\6\0\2\11\1\0\1\11\3\0\1\11\2\0"+
    "\1\1\1\11\2\0\3\11\2\0\1\11\5\0\2\11"+
    "\10\0\1\11\10\0\1\11\1\0\1\11\5\0\2\11"+
    "\5\0\2\11\1\0\1\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

    public Boolean illegalCharacter=false;
    public LinkedList<String> illegalCharacters= new LinkedList<String>();
    public LinkedList<Integer> illegalCharacterLine=new LinkedList<Integer>();
    public LinkedList<Integer> illegalCharacterColumn=new LinkedList<Integer>();

    StringBuffer string = new StringBuffer ();
    private Symbol symbol (int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    private Symbol symbol (int type, Object value){
        return new Symbol (type, yyline, yycolumn, value) ;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return symbol(ParserSym.EOF, "EOF");
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { illegalCharacter=true;
          illegalCharacters.add(yytext());
          illegalCharacterLine.add(yyline);
          illegalCharacterColumn.add(yycolumn);
          //return symbol(ParserSym.ERROR, yytext());
            }
            // fall through
          case 64: break;
          case 2:
            { /*SKIP WHITE SPACE*/
            }
            // fall through
          case 65: break;
          case 3:
            { return symbol(ParserSym.LPAREN, yytext());
            }
            // fall through
          case 66: break;
          case 4:
            { return symbol(ParserSym.RPAREN, yytext());
            }
            // fall through
          case 67: break;
          case 5:
            { return symbol(ParserSym.MULTI, yytext());
            }
            // fall through
          case 68: break;
          case 6:
            { return symbol(ParserSym.SUMA, yytext());
            }
            // fall through
          case 69: break;
          case 7:
            { return symbol(ParserSym.COMA, yytext());
            }
            // fall through
          case 70: break;
          case 8:
            { return symbol(ParserSym.RESTA, yytext());
            }
            // fall through
          case 71: break;
          case 9:
            { return symbol(ParserSym.DIVI, yytext());
            }
            // fall through
          case 72: break;
          case 10:
            { return symbol(ParserSym.NUMERO, yytext());
            }
            // fall through
          case 73: break;
          case 11:
            { return symbol(ParserSym.SEMI_COLON, yytext());
            }
            // fall through
          case 74: break;
          case 12:
            { return symbol(ParserSym.RQUE, yytext());
            }
            // fall through
          case 75: break;
          case 13:
            { return symbol(ParserSym.LCOR, yytext());
            }
            // fall through
          case 76: break;
          case 14:
            { return symbol(ParserSym.RCOR, yytext());
            }
            // fall through
          case 77: break;
          case 15:
            { return symbol(ParserSym.LQUE, yytext());
            }
            // fall through
          case 78: break;
          case 16:
            { return symbol(ParserSym.CADENA, yytext());
            }
            // fall through
          case 79: break;
          case 17:
            { return symbol(ParserSym.ASIGNACION, yytext());
            }
            // fall through
          case 80: break;
          case 18:
            { return symbol(ParserSym.COMENTARIO, yytext());
            }
            // fall through
          case 81: break;
          case 19:
            { return symbol(ParserSym.OR, yytext());
            }
            // fall through
          case 82: break;
          case 20:
            { return symbol(ParserSym.IF, yytext());
            }
            // fall through
          case 83: break;
          case 21:
            { return symbol(ParserSym.CARACTER, yytext());
            }
            // fall through
          case 84: break;
          case 22:
            { return symbol(ParserSym.AND, yytext());
            }
            // fall through
          case 85: break;
          case 23:
            { return symbol(ParserSym.FIN, yytext());
            }
            // fall through
          case 86: break;
          case 24:
            { return symbol(ParserSym.MODULO, yytext());
            }
            // fall through
          case 87: break;
          case 25:
            { return symbol(ParserSym.NOT, yytext());
            }
            // fall through
          case 88: break;
          case 26:
            { return symbol(ParserSym.VARIABLE,yytext());
            }
            // fall through
          case 89: break;
          case 27:
            { return symbol(ParserSym.COMO, yytext());
            }
            // fall through
          case 90: break;
          case 28:
            { return symbol(ParserSym.ELSE_IF, yytext());
            }
            // fall through
          case 91: break;
          case 29:
            { return symbol(ParserSym.FOR, yytext());
            }
            // fall through
          case 92: break;
          case 30:
            { return symbol(ParserSym.BOOLEAN, yytext());
            }
            // fall through
          case 93: break;
          case 31:
            { return symbol(ParserSym.CASE, yytext());
            }
            // fall through
          case 94: break;
          case 32:
            { return symbol(ParserSym.TO, yytext());
            }
            // fall through
          case 95: break;
          case 33:
            { return symbol(ParserSym.MAYOR, yytext());
            }
            // fall through
          case 96: break;
          case 34:
            { return symbol(ParserSym.MENOR, yytext());
            }
            // fall through
          case 97: break;
          case 35:
            { return symbol(ParserSym.SELECT, yytext());
            }
            // fall through
          case 98: break;
          case 36:
            { return symbol(ParserSym.TIPO, yytext());
            }
            // fall through
          case 99: break;
          case 37:
            { return symbol(ParserSym.END_IF, yytext());
            }
            // fall through
          case 100: break;
          case 38:
            { return symbol(ParserSym.INICIO, yytext());
            }
            // fall through
          case 101: break;
          case 39:
            { return symbol(ParserSym.METODO, yytext());
            }
            // fall through
          case 102: break;
          case 40:
            { return symbol(ParserSym.FUNCTION, yytext());
            }
            // fall through
          case 103: break;
          case 41:
            { return symbol(ParserSym.REPETIR, yytext());
            }
            // fall through
          case 104: break;
          case 42:
            { return symbol(ParserSym.EJECUTAR, yytext());
            }
            // fall through
          case 105: break;
          case 43:
            { return symbol(ParserSym.THEN, yytext());
            }
            // fall through
          case 106: break;
          case 44:
            { return symbol(ParserSym.IGUAL, yytext());
            }
            // fall through
          case 107: break;
          case 45:
            { return symbol(ParserSym.END_FOR, yytext());
            }
            // fall through
          case 108: break;
          case 46:
            { return symbol(ParserSym.IMPRIMIR, yytext());
            }
            // fall through
          case 109: break;
          case 47:
            { return symbol(ParserSym.INGRESAR, yytext());
            }
            // fall through
          case 110: break;
          case 48:
            { return symbol(ParserSym.WHILE, yytext());
            }
            // fall through
          case 111: break;
          case 49:
            { return symbol(ParserSym.POTENCIA, yytext());
            }
            // fall through
          case 112: break;
          case 50:
            { return symbol(ParserSym.RETURN, yytext());
            }
            // fall through
          case 113: break;
          case 51:
            { return symbol(ParserSym.CON_VALOR, yytext());
            }
            // fall through
          case 114: break;
          case 52:
            { return symbol(ParserSym.END_SELECT, yytext());
            }
            // fall through
          case 115: break;
          case 53:
            { return symbol(ParserSym.HASTA_QUE, yytext());
            }
            // fall through
          case 116: break;
          case 54:
            { return symbol(ParserSym.FIN_METODO, yytext());
            }
            // fall through
          case 117: break;
          case 55:
            { return symbol(ParserSym.END_FUNCTION, yytext());
            }
            // fall through
          case 118: break;
          case 56:
            { return symbol(ParserSym.IMPRIMIR_SIN_SALTO, yytext());
            }
            // fall through
          case 119: break;
          case 57:
            { return symbol(ParserSym.DIFERENTE, yytext());
            }
            // fall through
          case 120: break;
          case 58:
            { return symbol(ParserSym.END_WHILE, yytext());
            }
            // fall through
          case 121: break;
          case 59:
            { return symbol(ParserSym.MAYORIGUAL, yytext());
            }
            // fall through
          case 122: break;
          case 60:
            { return symbol(ParserSym.MENORIGUAL, yytext());
            }
            // fall through
          case 123: break;
          case 61:
            { return symbol(ParserSym.CON_PARAMETROS, yytext());
            }
            // fall through
          case 124: break;
          case 62:
            { return symbol(ParserSym.INCREMENTAL, yytext());
            }
            // fall through
          case 125: break;
          case 63:
            { return symbol(ParserSym.ELSE, yytext());
            }
            // fall through
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
