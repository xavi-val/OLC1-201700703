
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.backend.compiladores.services;

import java_cup.runtime.*;
import com.backend.compiladores.services.traductor.*;
import com.backend.compiladores.services.parserPackage.*;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\002\005\000\002\004\004\000\002\004\002\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\004\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\007\000" +
    "\002\005\005\000\002\005\004\000\002\005\003\000\002" +
    "\005\003\000\002\010\005\000\002\010\003\000\002\011" +
    "\005\000\002\011\003\000\002\007\011\000\002\012\006" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\015\003\000\002\015\003\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\004\000\002\013\003" +
    "\000\002\017\007\000\002\017\002\000\002\020\004\000" +
    "\002\020\002\000\002\016\011\000\002\022\010\000\002" +
    "\022\002\000\002\023\005\000\002\023\002\000\002\021" +
    "\010\000\002\025\004\000\002\025\002\000\002\024\014" +
    "\000\002\026\007\000\002\027\006\000\002\030\005\000" +
    "\002\033\006\000\002\033\004\000\002\033\002\000\002" +
    "\032\006\000\002\032\002\000\002\031\007\000\002\034" +
    "\011\000\002\036\005\000\002\036\003\000\002\036\002" +
    "\000\002\035\010\000\002\037\005\000\002\037\004\000" +
    "\002\037\005\000\002\037\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\266\000\004\004\004\001\002\000\040\003\034\005" +
    "\ufff6\024\012\025\023\033\040\046\024\053\011\060\041" +
    "\064\014\066\035\071\027\074\022\076\020\077\021\100" +
    "\036\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\064\003\uffee\005\uffee\024\uffee\025\uffee\033" +
    "\uffee\046\uffee\050\uffee\051\uffee\052\uffee\053\uffee\055\uffee" +
    "\056\uffee\060\uffee\062\uffee\064\uffee\065\uffee\066\uffee\067" +
    "\uffee\070\uffee\071\uffee\072\uffee\074\uffee\076\uffee\077\uffee" +
    "\100\uffee\001\002\000\064\003\ufff2\005\ufff2\024\ufff2\025" +
    "\ufff2\033\ufff2\046\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2" +
    "\055\ufff2\056\ufff2\060\ufff2\062\ufff2\064\ufff2\065\ufff2\066" +
    "\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\074\ufff2\076\ufff2" +
    "\077\ufff2\100\ufff2\001\002\000\012\007\045\014\047\020" +
    "\046\025\051\001\002\000\004\025\023\001\002\000\064" +
    "\003\uffef\005\uffef\024\uffef\025\uffef\033\uffef\046\uffef\050" +
    "\uffef\051\uffef\052\uffef\053\uffef\055\uffef\056\uffef\060\uffef" +
    "\062\uffef\064\uffef\065\uffef\066\uffef\067\uffef\070\uffef\071" +
    "\uffef\072\uffef\074\uffef\076\uffef\077\uffef\100\uffef\001\002" +
    "\000\022\007\045\014\112\020\046\021\103\022\104\023" +
    "\113\025\051\045\107\001\002\000\064\003\uffeb\005\uffeb" +
    "\024\uffeb\025\uffeb\033\uffeb\046\uffeb\050\uffeb\051\uffeb\052" +
    "\uffeb\053\uffeb\055\uffeb\056\uffeb\060\uffeb\062\uffeb\064\uffeb" +
    "\065\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\074" +
    "\uffeb\076\uffeb\077\uffeb\100\uffeb\001\002\000\064\003\ufff0" +
    "\005\ufff0\024\ufff0\025\ufff0\033\ufff0\046\ufff0\050\ufff0\051" +
    "\ufff0\052\ufff0\053\ufff0\055\ufff0\056\ufff0\060\ufff0\062\ufff0" +
    "\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0\072" +
    "\ufff0\074\ufff0\076\ufff0\077\ufff0\100\ufff0\001\002\000\064" +
    "\003\034\005\ufff6\024\012\025\023\033\040\046\024\050" +
    "\ufff6\051\ufff6\052\ufff6\053\011\055\ufff6\056\ufff6\060\041" +
    "\062\ufff6\064\014\065\ufff6\066\035\067\ufff6\070\ufff6\071" +
    "\027\072\ufff6\074\022\076\020\077\021\100\036\001\002" +
    "\000\004\025\225\001\002\000\024\007\045\014\112\020" +
    "\046\021\103\022\104\023\113\025\051\045\107\076\020" +
    "\001\002\000\004\025\211\001\002\000\010\026\uffd9\031" +
    "\207\034\uffd9\001\002\000\022\007\045\014\112\020\046" +
    "\021\103\022\104\023\113\025\051\045\107\001\002\000" +
    "\064\003\ufff4\005\ufff4\024\ufff4\025\ufff4\033\ufff4\046\ufff4" +
    "\050\ufff4\051\ufff4\052\ufff4\053\ufff4\055\ufff4\056\ufff4\060" +
    "\ufff4\062\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\070\ufff4" +
    "\071\ufff4\072\ufff4\074\ufff4\076\ufff4\077\ufff4\100\ufff4\001" +
    "\002\000\064\003\ufff5\005\ufff5\024\ufff5\025\ufff5\033\ufff5" +
    "\046\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\055\ufff5\056" +
    "\ufff5\060\ufff5\062\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5" +
    "\070\ufff5\071\ufff5\072\ufff5\074\ufff5\076\ufff5\077\ufff5\100" +
    "\ufff5\001\002\000\004\025\156\001\002\000\064\003\ufff3" +
    "\005\ufff3\024\ufff3\025\ufff3\033\ufff3\046\ufff3\050\ufff3\051" +
    "\ufff3\052\ufff3\053\ufff3\055\ufff3\056\ufff3\060\ufff3\062\ufff3" +
    "\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\072" +
    "\ufff3\074\ufff3\076\ufff3\077\ufff3\100\ufff3\001\002\000\004" +
    "\005\155\001\002\000\004\034\152\001\002\000\064\003" +
    "\uffec\005\uffec\024\uffec\025\uffec\033\uffec\046\uffec\050\uffec" +
    "\051\uffec\052\uffec\053\uffec\055\uffec\056\uffec\060\uffec\062" +
    "\uffec\064\uffec\065\uffec\066\uffec\067\uffec\070\uffec\071\uffec" +
    "\072\uffec\074\uffec\076\uffec\077\uffec\100\uffec\001\002\000" +
    "\022\032\142\033\151\050\146\055\141\062\147\065\150" +
    "\072\145\075\143\001\002\000\040\003\034\024\012\025" +
    "\023\033\040\046\024\053\011\060\041\064\014\066\035" +
    "\067\ufff6\071\027\074\022\076\020\077\021\100\036\001" +
    "\002\000\024\007\045\014\112\020\046\021\103\022\104" +
    "\023\113\025\051\045\107\076\020\001\002\000\064\003" +
    "\ufff1\005\ufff1\024\ufff1\025\ufff1\033\ufff1\046\ufff1\050\ufff1" +
    "\051\ufff1\052\ufff1\053\ufff1\055\ufff1\056\ufff1\060\ufff1\062" +
    "\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\070\ufff1\071\ufff1" +
    "\072\ufff1\074\ufff1\076\ufff1\077\ufff1\100\ufff1\001\002\000" +
    "\064\003\uffea\005\uffea\024\uffea\025\uffea\033\uffea\046\uffea" +
    "\050\uffea\051\uffea\052\uffea\053\uffea\055\uffea\056\uffea\060" +
    "\uffea\062\uffea\064\uffea\065\uffea\066\uffea\067\uffea\070\uffea" +
    "\071\uffea\072\uffea\074\uffea\076\uffea\077\uffea\100\uffea\001" +
    "\002\000\004\025\043\001\002\000\064\003\uffed\005\uffed" +
    "\024\uffed\025\uffed\033\uffed\046\uffed\050\uffed\051\uffed\052" +
    "\uffed\053\uffed\055\uffed\056\uffed\060\uffed\062\uffed\064\uffed" +
    "\065\uffed\066\uffed\067\uffed\070\uffed\071\uffed\072\uffed\074" +
    "\uffed\076\uffed\077\uffed\100\uffed\001\002\000\004\034\044" +
    "\001\002\000\012\007\045\014\047\020\046\025\051\001" +
    "\002\000\004\020\102\001\002\000\142\003\uffdc\005\uffdc" +
    "\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\015" +
    "\uffdc\017\uffdc\024\uffdc\025\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\044\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc" +
    "\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061" +
    "\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc" +
    "\070\uffdc\071\uffdc\072\uffdc\074\uffdc\076\uffdc\077\uffdc\100" +
    "\uffdc\001\002\000\012\007\045\014\047\020\046\025\051" +
    "\001\002\000\020\006\056\007\052\010\057\011\060\012" +
    "\054\013\055\061\053\001\002\000\142\003\uffdb\005\uffdb" +
    "\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\015" +
    "\uffdb\017\uffdb\024\uffdb\025\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043" +
    "\uffdb\044\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb" +
    "\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061" +
    "\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb" +
    "\070\uffdb\071\uffdb\072\uffdb\074\uffdb\076\uffdb\077\uffdb\100" +
    "\uffdb\001\002\000\012\007\045\014\047\020\046\025\051" +
    "\001\002\000\012\007\045\014\047\020\046\025\051\001" +
    "\002\000\004\016\065\001\002\000\012\007\045\014\047" +
    "\020\046\025\051\001\002\000\012\007\045\014\047\020" +
    "\046\025\051\001\002\000\012\007\045\014\047\020\046" +
    "\025\051\001\002\000\012\007\045\014\047\020\046\025" +
    "\051\001\002\000\142\003\uffe1\005\uffe1\006\uffe1\007\uffe1" +
    "\010\uffe1\011\uffe1\012\054\013\uffe1\015\uffe1\017\uffe1\024" +
    "\uffe1\025\uffe1\031\uffe1\032\uffe1\033\uffe1\035\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\046" +
    "\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1" +
    "\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063" +
    "\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\070\uffe1\071\uffe1" +
    "\072\uffe1\074\uffe1\076\uffe1\077\uffe1\100\uffe1\001\002\000" +
    "\142\003\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2" +
    "\012\054\013\uffe2\015\uffe2\017\uffe2\024\uffe2\025\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\044\uffe2\046\uffe2\047\uffe2\050" +
    "\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2" +
    "\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065" +
    "\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2\072\uffe2\074\uffe2" +
    "\076\uffe2\077\uffe2\100\uffe2\001\002\000\142\003\uffe4\005" +
    "\uffe4\006\uffe4\007\uffe4\010\057\011\060\012\054\013\055" +
    "\015\uffe4\017\uffe4\024\uffe4\025\uffe4\031\uffe4\032\uffe4\033" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4" +
    "\043\uffe4\044\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052" +
    "\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4" +
    "\061\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067" +
    "\uffe4\070\uffe4\071\uffe4\072\uffe4\074\uffe4\076\uffe4\077\uffe4" +
    "\100\uffe4\001\002\000\142\003\uffe0\005\uffe0\006\uffe0\007" +
    "\uffe0\010\uffe0\011\uffe0\012\054\013\uffe0\015\uffe0\017\uffe0" +
    "\024\uffe0\025\uffe0\031\uffe0\032\uffe0\033\uffe0\035\uffe0\036" +
    "\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0" +
    "\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054" +
    "\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0" +
    "\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0\071" +
    "\uffe0\072\uffe0\074\uffe0\076\uffe0\077\uffe0\100\uffe0\001\002" +
    "\000\012\007\045\014\047\020\046\025\051\001\002\000" +
    "\020\006\056\007\052\010\057\011\060\012\054\013\055" +
    "\017\067\001\002\000\142\003\uffdf\005\uffdf\006\uffdf\007" +
    "\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\015\uffdf\017\uffdf" +
    "\024\uffdf\025\uffdf\031\uffdf\032\uffdf\033\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf" +
    "\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054" +
    "\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf" +
    "\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\071" +
    "\uffdf\072\uffdf\074\uffdf\076\uffdf\077\uffdf\100\uffdf\001\002" +
    "\000\022\006\056\007\052\010\057\011\060\012\054\013" +
    "\055\054\uffbc\063\071\001\002\000\012\007\045\014\047" +
    "\020\046\025\051\001\002\000\004\054\073\001\002\000" +
    "\040\003\034\024\012\025\023\033\040\046\024\053\011" +
    "\060\041\062\ufff6\064\014\066\035\071\027\074\022\076" +
    "\020\077\021\100\036\001\002\000\004\062\075\001\002" +
    "\000\064\003\uffbb\005\uffbb\024\uffbb\025\uffbb\033\uffbb\046" +
    "\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\055\uffbb\056\uffbb" +
    "\060\uffbb\062\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\070" +
    "\uffbb\071\uffbb\072\uffbb\074\uffbb\076\uffbb\077\uffbb\100\uffbb" +
    "\001\002\000\020\006\056\007\052\010\057\011\060\012" +
    "\054\013\055\054\uffbd\001\002\000\142\003\uffe3\005\uffe3" +
    "\006\uffe3\007\uffe3\010\057\011\060\012\054\013\055\015" +
    "\uffe3\017\uffe3\024\uffe3\025\uffe3\031\uffe3\032\uffe3\033\uffe3" +
    "\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043" +
    "\uffe3\044\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3" +
    "\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061" +
    "\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3" +
    "\070\uffe3\071\uffe3\072\uffe3\074\uffe3\076\uffe3\077\uffe3\100" +
    "\uffe3\001\002\000\020\006\056\007\052\010\057\011\060" +
    "\012\054\013\055\015\101\001\002\000\142\003\uffde\005" +
    "\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde" +
    "\015\uffde\017\uffde\024\uffde\025\uffde\031\uffde\032\uffde\033" +
    "\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde" +
    "\043\uffde\044\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052" +
    "\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde" +
    "\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067" +
    "\uffde\070\uffde\071\uffde\072\uffde\074\uffde\076\uffde\077\uffde" +
    "\100\uffde\001\002\000\142\003\uffdd\005\uffdd\006\uffdd\007" +
    "\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\015\uffdd\017\uffdd" +
    "\024\uffdd\025\uffdd\031\uffdd\032\uffdd\033\uffdd\035\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd" +
    "\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054" +
    "\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd" +
    "\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\070\uffdd\071" +
    "\uffdd\072\uffdd\074\uffdd\076\uffdd\077\uffdd\100\uffdd\001\002" +
    "\000\116\003\uffe8\005\uffe8\015\uffe8\024\uffe8\025\uffe8\031" +
    "\uffe8\032\uffe8\033\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\042\uffe8\043\uffe8\044\uffe8\046\uffe8\047\uffe8\050" +
    "\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8" +
    "\060\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\070" +
    "\uffe8\071\uffe8\072\uffe8\074\uffe8\076\uffe8\077\uffe8\100\uffe8" +
    "\001\002\000\116\003\uffc8\005\uffc8\015\uffc8\024\uffc8\025" +
    "\uffc8\031\uffc8\032\uffc8\033\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\046\uffc8\047" +
    "\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8" +
    "\056\uffc8\060\uffc8\062\uffc8\064\uffc8\065\uffc8\066\uffc8\067" +
    "\uffc8\070\uffc8\071\uffc8\072\uffc8\074\uffc8\076\uffc8\077\uffc8" +
    "\100\uffc8\001\002\000\024\032\135\035\124\036\122\037" +
    "\123\040\121\041\125\042\130\043\131\044\120\001\002" +
    "\000\116\003\uffe7\005\uffe7\015\uffe7\024\uffe7\025\uffe7\031" +
    "\uffe7\032\uffe7\033\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7" +
    "\041\uffe7\042\uffe7\043\uffe7\044\uffe7\046\uffe7\047\uffe7\050" +
    "\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7" +
    "\060\uffe7\062\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\070" +
    "\uffe7\071\uffe7\072\uffe7\074\uffe7\076\uffe7\077\uffe7\100\uffe7" +
    "\001\002\000\022\007\045\014\112\020\046\021\103\022" +
    "\104\023\113\025\051\045\107\001\002\000\064\003\uffa9" +
    "\005\uffa9\024\uffa9\025\uffa9\033\uffa9\046\uffa9\050\uffa9\051" +
    "\uffa9\052\uffa9\053\uffa9\055\uffa9\056\uffa9\060\uffa9\062\uffa9" +
    "\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9\072" +
    "\uffa9\074\uffa9\076\uffa9\077\uffa9\100\uffa9\001\002\000\132" +
    "\003\uffe5\005\uffe5\006\056\007\052\010\057\011\060\012" +
    "\054\013\055\015\uffe5\024\uffe5\025\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042" +
    "\uffe5\043\uffe5\044\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5" +
    "\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\060\uffe5\062" +
    "\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\070\uffe5\071\uffe5" +
    "\072\uffe5\074\uffe5\076\uffe5\077\uffe5\100\uffe5\001\002\000" +
    "\022\007\045\014\112\020\046\021\103\022\104\023\113" +
    "\025\051\045\107\001\002\000\116\003\uffe6\005\uffe6\015" +
    "\uffe6\024\uffe6\025\uffe6\031\uffe6\032\uffe6\033\uffe6\035\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044" +
    "\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6" +
    "\054\uffe6\055\uffe6\056\uffe6\060\uffe6\062\uffe6\064\uffe6\065" +
    "\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6\074\uffe6" +
    "\076\uffe6\077\uffe6\100\uffe6\001\002\000\022\035\124\036" +
    "\122\037\123\040\121\041\125\042\130\043\131\044\120" +
    "\001\002\000\024\015\117\035\uffe7\036\uffe7\037\uffe7\040" +
    "\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\001\002\000\040" +
    "\006\056\007\052\010\057\011\060\012\054\013\055\015" +
    "\101\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5" +
    "\043\uffe5\044\uffe5\001\002\000\116\003\uffca\005\uffca\015" +
    "\uffca\024\uffca\025\uffca\031\uffca\032\uffca\033\uffca\035\uffca" +
    "\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044" +
    "\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca" +
    "\054\uffca\055\uffca\056\uffca\060\uffca\062\uffca\064\uffca\065" +
    "\uffca\066\uffca\067\uffca\070\uffca\071\uffca\072\uffca\074\uffca" +
    "\076\uffca\077\uffca\100\uffca\001\002\000\022\007\uffcd\014" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\025\uffcd\045\uffcd" +
    "\001\002\000\022\007\uffd1\014\uffd1\020\uffd1\021\uffd1\022" +
    "\uffd1\023\uffd1\025\uffd1\045\uffd1\001\002\000\022\007\uffd3" +
    "\014\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\025\uffd3\045" +
    "\uffd3\001\002\000\022\007\uffd2\014\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\025\uffd2\045\uffd2\001\002\000\022\007" +
    "\uffd4\014\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\025\uffd4" +
    "\045\uffd4\001\002\000\022\007\uffd0\014\uffd0\020\uffd0\021" +
    "\uffd0\022\uffd0\023\uffd0\025\uffd0\045\uffd0\001\002\000\022" +
    "\007\045\014\112\020\046\021\103\022\104\023\113\025" +
    "\051\045\107\001\002\000\022\007\045\014\112\020\046" +
    "\021\103\022\104\023\113\025\051\045\107\001\002\000" +
    "\022\007\uffcf\014\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf" +
    "\025\uffcf\045\uffcf\001\002\000\022\007\uffce\014\uffce\020" +
    "\uffce\021\uffce\022\uffce\023\uffce\025\uffce\045\uffce\001\002" +
    "\000\116\003\uffcc\005\uffcc\015\uffcc\024\uffcc\025\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\035\124\036\122\037\123\040\121" +
    "\041\125\042\130\043\131\044\120\046\uffcc\047\uffcc\050" +
    "\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc" +
    "\060\uffcc\062\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\070" +
    "\uffcc\071\uffcc\072\uffcc\074\uffcc\076\uffcc\077\uffcc\100\uffcc" +
    "\001\002\000\116\003\uffcb\005\uffcb\015\uffcb\024\uffcb\025" +
    "\uffcb\031\uffcb\032\uffcb\033\uffcb\035\124\036\122\037\123" +
    "\040\121\041\125\042\130\043\131\044\120\046\uffcb\047" +
    "\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb" +
    "\056\uffcb\060\uffcb\062\uffcb\064\uffcb\065\uffcb\066\uffcb\067" +
    "\uffcb\070\uffcb\071\uffcb\072\uffcb\074\uffcb\076\uffcb\077\uffcb" +
    "\100\uffcb\001\002\000\116\003\uffc9\005\uffc9\015\uffc9\024" +
    "\uffc9\025\uffc9\031\uffc9\032\uffc9\033\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\046" +
    "\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9" +
    "\055\uffc9\056\uffc9\060\uffc9\062\uffc9\064\uffc9\065\uffc9\066" +
    "\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9\074\uffc9\076\uffc9" +
    "\077\uffc9\100\uffc9\001\002\000\064\003\uffaa\005\uffaa\024" +
    "\uffaa\025\uffaa\033\uffaa\046\uffaa\050\uffaa\051\uffaa\052\uffaa" +
    "\053\uffaa\055\uffaa\056\uffaa\060\uffaa\062\uffaa\064\uffaa\065" +
    "\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa\074\uffaa" +
    "\076\uffaa\077\uffaa\100\uffaa\001\002\000\004\067\137\001" +
    "\002\000\022\007\045\014\112\020\046\021\103\022\104" +
    "\023\113\025\051\045\107\001\002\000\104\003\uffb9\005" +
    "\uffb9\024\uffb9\025\uffb9\033\uffb9\035\124\036\122\037\123" +
    "\040\121\041\125\042\130\043\131\044\120\046\uffb9\050" +
    "\uffb9\051\uffb9\052\uffb9\053\uffb9\055\uffb9\056\uffb9\060\uffb9" +
    "\062\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9\071" +
    "\uffb9\072\uffb9\074\uffb9\076\uffb9\077\uffb9\100\uffb9\001\002" +
    "\000\064\003\ufffd\005\ufffd\024\ufffd\025\ufffd\033\ufffd\046" +
    "\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\055\ufffd\056\ufffd" +
    "\060\ufffd\062\ufffd\064\ufffd\065\ufffd\066\ufffd\067\ufffd\070" +
    "\ufffd\071\ufffd\072\ufffd\074\ufffd\076\ufffd\077\ufffd\100\ufffd" +
    "\001\002\000\064\003\000\005\000\024\000\025\000\033" +
    "\000\046\000\050\000\051\000\052\000\053\000\055\000" +
    "\056\000\060\000\062\000\064\000\065\000\066\000\067" +
    "\000\070\000\071\000\072\000\074\000\076\000\077\000" +
    "\100\000\001\002\000\064\003\ufff9\005\ufff9\024\ufff9\025" +
    "\ufff9\033\ufff9\046\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9" +
    "\055\ufff9\056\ufff9\060\ufff9\062\ufff9\064\ufff9\065\ufff9\066" +
    "\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9\074\ufff9\076\ufff9" +
    "\077\ufff9\100\ufff9\001\002\000\064\003\uffe9\005\uffe9\024" +
    "\uffe9\025\uffe9\033\uffe9\046\uffe9\050\uffe9\051\uffe9\052\uffe9" +
    "\053\uffe9\055\uffe9\056\uffe9\060\uffe9\062\uffe9\064\uffe9\065" +
    "\uffe9\066\uffe9\067\uffe9\070\uffe9\071\uffe9\072\uffe9\074\uffe9" +
    "\076\uffe9\077\uffe9\100\uffe9\001\002\000\064\003\ufffa\005" +
    "\ufffa\024\ufffa\025\ufffa\033\ufffa\046\ufffa\050\ufffa\051\ufffa" +
    "\052\ufffa\053\ufffa\055\ufffa\056\ufffa\060\ufffa\062\ufffa\064" +
    "\ufffa\065\ufffa\066\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa" +
    "\074\ufffa\076\ufffa\077\ufffa\100\ufffa\001\002\000\064\003" +
    "\ufffe\005\ufffe\024\ufffe\025\ufffe\033\ufffe\046\ufffe\050\ufffe" +
    "\051\ufffe\052\ufffe\053\ufffe\055\ufffe\056\ufffe\060\ufffe\062" +
    "\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe" +
    "\072\ufffe\074\ufffe\076\ufffe\077\ufffe\100\ufffe\001\002\000" +
    "\064\003\ufffc\005\ufffc\024\ufffc\025\ufffc\033\ufffc\046\ufffc" +
    "\050\ufffc\051\ufffc\052\ufffc\053\ufffc\055\ufffc\056\ufffc\060" +
    "\ufffc\062\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc" +
    "\071\ufffc\072\ufffc\074\ufffc\076\ufffc\077\ufffc\100\ufffc\001" +
    "\002\000\064\003\ufffb\005\ufffb\024\ufffb\025\ufffb\033\ufffb" +
    "\046\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\055\ufffb\056" +
    "\ufffb\060\ufffb\062\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb" +
    "\070\ufffb\071\ufffb\072\ufffb\074\ufffb\076\ufffb\077\ufffb\100" +
    "\ufffb\001\002\000\064\003\uffff\005\uffff\024\uffff\025\uffff" +
    "\033\uffff\046\uffff\050\uffff\051\uffff\052\uffff\053\uffff\055" +
    "\uffff\056\uffff\060\uffff\062\uffff\064\uffff\065\uffff\066\uffff" +
    "\067\uffff\070\uffff\071\uffff\072\uffff\074\uffff\076\uffff\077" +
    "\uffff\100\uffff\001\002\000\022\007\045\014\112\020\046" +
    "\021\103\022\104\023\113\025\051\045\107\001\002\000" +
    "\024\032\154\035\124\036\122\037\123\040\121\041\125" +
    "\042\130\043\131\044\120\001\002\000\064\003\uffd5\005" +
    "\uffd5\024\uffd5\025\uffd5\033\uffd5\046\uffd5\050\uffd5\051\uffd5" +
    "\052\uffd5\053\uffd5\055\uffd5\056\uffd5\060\uffd5\062\uffd5\064" +
    "\uffd5\065\uffd5\066\uffd5\067\uffd5\070\uffd5\071\uffd5\072\uffd5" +
    "\074\uffd5\076\uffd5\077\uffd5\100\uffd5\001\002\000\004\002" +
    "\ufff8\001\002\000\042\003\uffb3\024\uffb3\025\uffb3\033\uffb3" +
    "\046\uffb3\053\uffb3\060\uffb3\064\uffb3\066\uffb3\071\uffb3\072" +
    "\uffb3\073\157\074\uffb3\076\uffb3\077\uffb3\100\uffb3\001\002" +
    "\000\004\014\163\001\002\000\040\003\034\024\012\025" +
    "\023\033\040\046\024\053\011\060\041\064\014\066\035" +
    "\071\027\072\ufff6\074\022\076\020\077\021\100\036\001" +
    "\002\000\004\072\162\001\002\000\064\003\uffb2\005\uffb2" +
    "\024\uffb2\025\uffb2\033\uffb2\046\uffb2\050\uffb2\051\uffb2\052" +
    "\uffb2\053\uffb2\055\uffb2\056\uffb2\060\uffb2\062\uffb2\064\uffb2" +
    "\065\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2\074" +
    "\uffb2\076\uffb2\077\uffb2\100\uffb2\001\002\000\006\015\uffb5" +
    "\025\165\001\002\000\004\015\171\001\002\000\004\027" +
    "\166\001\002\000\006\015\uffb6\031\167\001\002\000\006" +
    "\015\uffb5\025\165\001\002\000\004\015\uffb7\001\002\000" +
    "\042\003\uffb4\024\uffb4\025\uffb4\033\uffb4\046\uffb4\053\uffb4" +
    "\060\uffb4\064\uffb4\066\uffb4\070\uffb4\071\uffb4\072\uffb4\074" +
    "\uffb4\076\uffb4\077\uffb4\100\uffb4\001\002\000\024\035\124" +
    "\036\122\037\123\040\121\041\125\042\130\043\131\044" +
    "\120\047\173\001\002\000\044\003\034\024\012\025\023" +
    "\033\040\046\024\050\ufff6\051\ufff6\052\ufff6\053\011\060" +
    "\041\064\014\066\035\071\027\074\022\076\020\077\021" +
    "\100\036\001\002\000\010\050\uffc6\051\uffc6\052\176\001" +
    "\002\000\006\050\uffc4\051\203\001\002\000\022\007\045" +
    "\014\112\020\046\021\103\022\104\023\113\025\051\045" +
    "\107\001\002\000\024\035\124\036\122\037\123\040\121" +
    "\041\125\042\130\043\131\044\120\047\200\001\002\000" +
    "\044\003\034\024\012\025\023\033\040\046\024\050\ufff6" +
    "\051\ufff6\052\ufff6\053\011\060\041\064\014\066\035\071" +
    "\027\074\022\076\020\077\021\100\036\001\002\000\010" +
    "\050\uffc6\051\uffc6\052\176\001\002\000\006\050\uffc7\051" +
    "\uffc7\001\002\000\040\003\034\024\012\025\023\033\040" +
    "\046\024\050\ufff6\053\011\060\041\064\014\066\035\071" +
    "\027\074\022\076\020\077\021\100\036\001\002\000\004" +
    "\050\205\001\002\000\064\003\uffc3\005\uffc3\024\uffc3\025" +
    "\uffc3\033\uffc3\046\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3" +
    "\055\uffc3\056\uffc3\060\uffc3\062\uffc3\064\uffc3\065\uffc3\066" +
    "\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3\074\uffc3\076\uffc3" +
    "\077\uffc3\100\uffc3\001\002\000\004\050\uffc5\001\002\000" +
    "\004\025\023\001\002\000\006\026\uffda\034\uffda\001\002" +
    "\000\004\027\212\001\002\000\042\003\uffb3\024\uffb3\025" +
    "\uffb3\033\uffb3\046\uffb3\053\uffb3\060\uffb3\064\uffb3\066\uffb3" +
    "\070\uffb3\071\uffb3\073\157\074\uffb3\076\uffb3\077\uffb3\100" +
    "\uffb3\001\002\000\040\003\034\024\012\025\023\033\040" +
    "\046\024\053\011\060\041\064\014\066\035\070\ufff6\071" +
    "\027\074\022\076\020\077\021\100\036\001\002\000\004" +
    "\070\215\001\002\000\022\007\045\014\112\020\046\021" +
    "\103\022\104\023\113\025\051\045\107\001\002\000\004" +
    "\075\217\001\002\000\064\003\uffb1\005\uffb1\024\uffb1\025" +
    "\uffb1\033\uffb1\046\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1" +
    "\055\uffb1\056\uffb1\060\uffb1\062\uffb1\064\uffb1\065\uffb1\066" +
    "\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1\074\uffb1\076\uffb1" +
    "\077\uffb1\100\uffb1\001\002\000\024\032\221\035\124\036" +
    "\122\037\123\040\121\041\125\042\130\043\131\044\120" +
    "\001\002\000\004\075\uffb8\001\002\000\024\032\224\035" +
    "\124\036\122\037\123\040\121\041\125\042\130\043\131" +
    "\044\120\001\002\000\064\003\uffab\005\uffab\024\uffab\025" +
    "\uffab\033\uffab\046\uffab\050\uffab\051\uffab\052\uffab\053\uffab" +
    "\055\uffab\056\uffab\060\uffab\062\uffab\064\uffab\065\uffab\066" +
    "\uffab\067\uffab\070\uffab\071\uffab\072\uffab\074\uffab\076\uffab" +
    "\077\uffab\100\uffab\001\002\000\064\003\uffac\005\uffac\024" +
    "\uffac\025\uffac\033\uffac\046\uffac\050\uffac\051\uffac\052\uffac" +
    "\053\uffac\055\uffac\056\uffac\060\uffac\062\uffac\064\uffac\065" +
    "\uffac\066\uffac\067\uffac\070\uffac\071\uffac\072\uffac\074\uffac" +
    "\076\uffac\077\uffac\100\uffac\001\002\000\004\014\226\001" +
    "\002\000\024\007\045\014\112\015\uffae\020\046\021\103" +
    "\022\104\023\113\025\051\045\107\001\002\000\026\015" +
    "\uffaf\031\233\035\124\036\122\037\123\040\121\041\125" +
    "\042\130\043\131\044\120\001\002\000\004\015\231\001" +
    "\002\000\004\032\232\001\002\000\064\003\uffad\005\uffad" +
    "\024\uffad\025\uffad\033\uffad\046\uffad\050\uffad\051\uffad\052" +
    "\uffad\053\uffad\055\uffad\056\uffad\060\uffad\062\uffad\064\uffad" +
    "\065\uffad\066\uffad\067\uffad\070\uffad\071\uffad\072\uffad\074" +
    "\uffad\076\uffad\077\uffad\100\uffad\001\002\000\024\007\045" +
    "\014\112\015\uffae\020\046\021\103\022\104\023\113\025" +
    "\051\045\107\001\002\000\004\015\uffb0\001\002\000\030" +
    "\005\ufff7\050\ufff7\051\ufff7\052\ufff7\055\ufff7\056\ufff7\062" +
    "\ufff7\065\ufff7\067\ufff7\070\ufff7\072\ufff7\001\002\000\024" +
    "\035\124\036\122\037\123\040\121\041\125\042\130\043" +
    "\131\044\120\054\237\001\002\000\040\003\034\024\012" +
    "\025\023\033\040\046\024\053\011\060\041\064\014\065" +
    "\ufff6\066\035\071\027\074\022\076\020\077\021\100\036" +
    "\001\002\000\004\065\241\001\002\000\064\003\uffba\005" +
    "\uffba\024\uffba\025\uffba\033\uffba\046\uffba\050\uffba\051\uffba" +
    "\052\uffba\053\uffba\055\uffba\056\uffba\060\uffba\062\uffba\064" +
    "\uffba\065\uffba\066\uffba\067\uffba\070\uffba\071\uffba\072\uffba" +
    "\074\uffba\076\uffba\077\uffba\100\uffba\001\002\000\004\026" +
    "\243\001\002\000\004\027\244\001\002\000\004\030\245" +
    "\001\002\000\022\007\045\014\112\020\046\021\103\022" +
    "\104\023\113\025\051\045\107\001\002\000\026\031\251" +
    "\032\uffd7\035\124\036\122\037\123\040\121\041\125\042" +
    "\130\043\131\044\120\001\002\000\004\032\250\001\002" +
    "\000\064\003\uffd6\005\uffd6\024\uffd6\025\uffd6\033\uffd6\046" +
    "\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\055\uffd6\056\uffd6" +
    "\060\uffd6\062\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070" +
    "\uffd6\071\uffd6\072\uffd6\074\uffd6\076\uffd6\077\uffd6\100\uffd6" +
    "\001\002\000\022\007\045\014\112\020\046\021\103\022" +
    "\104\023\113\025\051\045\107\001\002\000\004\032\uffd8" +
    "\001\002\000\020\006\056\007\052\010\057\011\060\012" +
    "\054\013\055\054\254\001\002\000\010\051\uffc1\055\uffc1" +
    "\056\256\001\002\000\006\051\264\055\uffbf\001\002\000" +
    "\012\007\045\014\047\020\046\025\051\001\002\000\020" +
    "\006\056\007\052\010\057\011\060\012\054\013\055\057" +
    "\260\001\002\000\004\047\261\001\002\000\044\003\034" +
    "\024\012\025\023\033\040\046\024\051\ufff6\053\011\055" +
    "\ufff6\056\ufff6\060\041\064\014\066\035\071\027\074\022" +
    "\076\020\077\021\100\036\001\002\000\010\051\uffc1\055" +
    "\uffc1\056\256\001\002\000\006\051\uffc2\055\uffc2\001\002" +
    "\000\004\047\267\001\002\000\004\055\266\001\002\000" +
    "\064\003\uffbe\005\uffbe\024\uffbe\025\uffbe\033\uffbe\046\uffbe" +
    "\050\uffbe\051\uffbe\052\uffbe\053\uffbe\055\uffbe\056\uffbe\060" +
    "\uffbe\062\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\070\uffbe" +
    "\071\uffbe\072\uffbe\074\uffbe\076\uffbe\077\uffbe\100\uffbe\001" +
    "\002\000\040\003\034\024\012\025\023\033\040\046\024" +
    "\053\011\055\ufff6\060\041\064\014\066\035\071\027\074" +
    "\022\076\020\077\021\100\036\001\002\000\004\055\uffc0" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\266\000\004\002\004\001\001\000\036\003\016\004" +
    "\030\007\025\010\031\012\024\016\027\021\007\024\036" +
    "\026\015\027\012\031\006\034\041\035\032\037\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\252\001\001\000\004\010" +
    "\241\001\001\000\002\001\001\000\010\005\110\006\235" +
    "\013\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\016\004\234\007\025\010\031\012\024\016\027" +
    "\021\007\024\036\026\015\027\012\031\006\034\041\035" +
    "\032\037\014\001\001\000\002\001\001\000\012\005\110" +
    "\006\221\013\105\035\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\110\006\171\013\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\143\001\001\000\036\003\016\004" +
    "\135\007\025\010\031\012\024\016\027\021\007\024\036" +
    "\026\015\027\012\031\006\034\041\035\032\037\014\001" +
    "\001\000\012\005\110\006\104\013\105\035\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\076" +
    "\001\001\000\004\005\067\001\001\000\002\001\001\000" +
    "\004\005\063\001\001\000\004\005\062\001\001\000\004" +
    "\005\061\001\001\000\004\005\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\071\001\001\000\004\005\075\001\001" +
    "\000\002\001\001\000\036\003\016\004\073\007\025\010" +
    "\031\012\024\016\027\021\007\024\036\026\015\027\012" +
    "\031\006\034\041\035\032\037\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\126\015\125" +
    "\001\001\000\002\001\001\000\010\005\110\006\133\013" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\115\006\113\013\114\001\001\000\002\001\001\000" +
    "\006\014\126\015\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\110\006\132\013\105\001" +
    "\001\000\010\005\110\006\131\013\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\126\015\125\001" +
    "\001\000\006\014\126\015\125\001\001\000\006\014\126" +
    "\015\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\110\006\137\013\105\001\001\000\006\014\126" +
    "\015\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\110\006\152\013\105\001\001\000\006" +
    "\014\126\015\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\157\001\001\000\002\001\001\000\036" +
    "\003\016\004\160\007\025\010\031\012\024\016\027\021" +
    "\007\024\036\026\015\027\012\031\006\034\041\035\032" +
    "\037\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\126\015\125\001\001" +
    "\000\036\003\016\004\173\007\025\010\031\012\024\016" +
    "\027\021\007\024\036\026\015\027\012\031\006\034\041" +
    "\035\032\037\014\001\001\000\004\017\174\001\001\000" +
    "\004\020\203\001\001\000\010\005\110\006\176\013\105" +
    "\001\001\000\006\014\126\015\125\001\001\000\036\003" +
    "\016\004\200\007\025\010\031\012\024\016\027\021\007" +
    "\024\036\026\015\027\012\031\006\034\041\035\032\037" +
    "\014\001\001\000\004\017\201\001\001\000\002\001\001" +
    "\000\036\003\016\004\205\007\025\010\031\012\024\016" +
    "\027\021\007\024\036\026\015\027\012\031\006\034\041" +
    "\035\032\037\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\207\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\212\001\001\000" +
    "\036\003\016\004\213\007\025\010\031\012\024\016\027" +
    "\021\007\024\036\026\015\027\012\031\006\034\041\035" +
    "\032\037\014\001\001\000\004\030\215\001\001\000\010" +
    "\005\110\006\217\013\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\126\015\125\001\001\000\002" +
    "\001\001\000\006\014\126\015\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\110" +
    "\006\226\013\105\036\227\001\001\000\006\014\126\015" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\110\006\226\013\105\036\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\126" +
    "\015\125\001\001\000\036\003\016\004\237\007\025\010" +
    "\031\012\024\016\027\021\007\024\036\026\015\027\012" +
    "\031\006\034\041\035\032\037\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\110\006\245\011\246\013" +
    "\105\001\001\000\006\014\126\015\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\110\006\245\011" +
    "\251\013\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\254\001\001\000\004\023\264\001\001\000" +
    "\004\005\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\016\004\261\007\025\010\031\012\024\016" +
    "\027\021\007\024\036\026\015\027\012\031\006\034\041" +
    "\035\032\037\014\001\001\000\004\022\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\016\004\267\007\025\010\031\012" +
    "\024\016\027\021\007\024\036\026\015\027\012\031\006" +
    "\034\041\035\032\037\014\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



//HACER CASO OMISO A ESTOS ERRORES SI ESTAS USANDO INTELLIJ
//Reescritura de los metodos nativos de CUP para mi conveniencia
    public Symbol s;
    public LinkedList<String> p_list = new LinkedList();
    public LinkedList<String> error_list = new LinkedList();
    public String izquierdo="", derecho="";

    //Asigna el token de error para despues poder sacarlo con el get
    public void syntax_error(Symbol s){
        this.s = s;
        this.report_expected_token_ids();
    }

    //Sacamos el token que da error
    public Symbol getSymbolError(){
        return this.s;

    }


    //CUP nos da una lista de los posibles token que se esperaban
    protected void report_expected_token_ids() {
        List<Integer> ids = this.expected_token_ids();
        LinkedList<String> list = new LinkedList();
        Iterator var3 = ids.iterator();

        while(var3.hasNext()) {
            Integer expected = (Integer)var3.next();
            list.add(this.symbl_name_from_id(expected));
        }

        this.p_list=list;

    }

    //Sacamos esa lista
    public LinkedList<String> getExpectedTokens(){
            return this.p_list;
    }

    //Imprimir errores
    public String getIzquierda(){
        return izquierdo;
    }

    public String getDerecha(){
        return derecho;
    }

    public void asignarIzquierdoDerecho(int left, int right){
        derecho = this.symbl_name_from_id(right);
        izquierdo =this.symbl_name_from_id(left);
    }

    public String reportarError(){

        String error = "-----------------------------------------------------------------------------------------------------------\n";

        error += "ERROR EN:  Linea " + (this.s.left + 1) + " Columna " + (this.s.right + 1) + ", texto: " + (this.s.value)+"\n"+
                        "Izquierda: " + this.getIzquierda() + " , " + "Derecha: " + this.getDerecha() + " , \n" + "Expected tokens: " + this.p_list + "\n";

        error += "-----------------------------------------------------------------------------------------------------------\n";

        error_list.add(error);
        System.out.println(error);

        return error;
    }

    public int error_sync_size(){
        return 2;
    }


    //-----------------------------------------------------------

    public Ast ast = new Ast();
    public long contador = 1;

    /*ARRAY OF OBJECT TO STRING = ats*/
    private String ats(Object[] array){
        String answer = "";

        for(int i = 0; i < array.length; i++) {
          answer+= array[i].toString();
        }

        return answer;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // sincronizacion ::= SEMI_COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sincronizacion",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sincronizacion ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sincronizacion",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sincronizacion ::= END_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sincronizacion",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sincronizacion ::= END_SELECT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sincronizacion",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sincronizacion ::= END_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sincronizacion",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sincronizacion ::= END_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sincronizacion",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sincronizacion ::= FIN_METODO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sincronizacion",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sincronizacion ::= END_FUNCTION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sincronizacion",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inicio ::= INICIO lista_instrucciones FIN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo tmp = new Nodo("Global","");
            tmp.setNumNodo(contador++);
            tmp.addHijo(new Nodo("inicio",e1.toString(),contador++));
            tmp.addHijo((Nodo) e2);
            tmp.addHijo(new Nodo("final", e3.toString(),contador++));
            ast.raiz = tmp;
            RESULT=tmp;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_instrucciones ::= instruccion lista_instrucciones 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo tmp = new Nodo("instruccion","");
                        tmp.setNumNodo(contador++);
                        tmp.addHijo((Nodo)e1);
                        tmp.addHijo((Nodo)e2);
                        RESULT=tmp;
                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_instrucciones ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= declaracion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= asignar 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=e2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= if 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=e3;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= select_case 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=e3;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= for 
            {
              Object RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=e4;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= mientras 
            {
              Object RESULT =null;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=e5;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= repetir 
            {
              Object RESULT =null;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=e6;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= metodo 
            {
              Object RESULT =null;
		int e7left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=e7;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= funcion 
            {
              Object RESULT =null;
		int e8left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e8 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=e8;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= ejecutar 
            {
              Object RESULT =null;
		int e9left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e9 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=e9;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= imprimir 
            {
              Object RESULT =null;
		int e10left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e10right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e10 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=e10;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= COMENTARIO 
            {
              Object RESULT =null;
		int e20left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e20right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e20 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Nodo tmp = new Nodo("comentario",e20.toString(),contador++);
                tmp.setNumNodo(contador++);
                RESULT=tmp;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= error sincronizacion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
               asignarIzquierdoDerecho(e1left,e1right);
               reportarError();
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valor ::= CADENA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  ats(new Object[] {e1}) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // valor ::= condicion 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ats(new Object[] {e2}) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // valor ::= CARACTER 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ats(new Object[] {e3}) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // valor ::= expr 
            {
              Object RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ats(new Object[] {e4}) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr SUMA expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ats(new Object[] {e1,e2,e3}) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr RESTA expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ats(new Object[] {e1,e2,e3}) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr MULTI expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ats(new Object[] {e1,e2,e3}) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr DIVI expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ats(new Object[] {e1,e2,e3}) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr MODULO expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ats(new Object[] {e1,e2,e3}) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr POTENCIA LCOR expr RCOR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ats(new Object[] {e1,e2,e3,e4,e5}) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ats(new Object[] {e1,e2,e3}) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= RESTA NUMERO 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ats(new Object[] {e1,e2}) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= NUMERO 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ats(new Object[] {e1}) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= VARIABLE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ats(new Object[] {e1}) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // lista_variables ::= VARIABLE COMA lista_variables 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ats(new Object[] {e1,e2,e3}) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lista_variables ::= VARIABLE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ats(new Object[] {e1}) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_variables",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lista_valores ::= valor COMA lista_valores 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ats(new Object[] {e1,e2,e3}) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valores",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lista_valores ::= valor 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ats(new Object[] {e1}) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valores",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracion ::= INGRESAR lista_variables COMO TIPO CON_VALOR lista_valores SEMI_COLON 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Nodo tmp = new Nodo("Declaracion","");
    tmp.setNumNodo(contador++);
    tmp.addHijo(new Nodo("Ingresar",e1.toString(),contador++)) /*terminal*/;
    tmp.addHijo(new Nodo("Variables",e2.toString(),contador++)) /*terminal-indirecto*/;
    tmp.addHijo(new Nodo("COMO",e3.toString(),contador++)) /*terminal*/;
    tmp.addHijo(new Nodo("TIPO",e4.toString(),contador++)) /*terminal*/;
    tmp.addHijo(new Nodo("CON_VALOR",e5.toString(),contador++)) /*terminal*/;
    tmp.addHijo(new Nodo("Valores",e6.toString(),contador++)) /*terminal-indirecto*/;
    tmp.addHijo(new Nodo(";",e7.toString(),contador++)) /*terminal*/;
    RESULT=tmp;
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // asignar ::= lista_variables ASIGNACION valor SEMI_COLON 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Nodo tmp = new Nodo("Asignacion","");
    tmp.setNumNodo(contador++);
    tmp.addHijo(new Nodo("Variables",e1.toString(),contador++)) /*terminal-indirecto*/;
    tmp.addHijo(new Nodo("Asignar",e2.toString(),contador++)) /*terminal*/;
    tmp.addHijo(new Nodo("Valores",e3.toString(),contador++)) /*terminal-indirecto*/;
    tmp.addHijo(new Nodo(";",e4.toString(),contador++)) /*terminal*/;
    RESULT=tmp;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignar",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // op_relacional ::= MAYOR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ats(new Object[] {e1}) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relacional",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // op_relacional ::= MENOR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ats(new Object[] {e1}) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relacional",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // op_relacional ::= MAYORIGUAL 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ats(new Object[] {e1}) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relacional",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // op_relacional ::= MENORIGUAL 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ats(new Object[] {e1}) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relacional",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // op_relacional ::= IGUAL 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ats(new Object[] {e1}) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relacional",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // op_relacional ::= DIFERENTE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ats(new Object[] {e1}) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relacional",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // op_logico ::= OR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ats(new Object[] {e1}) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_logico",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // op_logico ::= AND 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ats(new Object[] {e1}) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_logico",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // condicion ::= valor op_relacional valor 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ats(new Object[] {e1,e2,e3}) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // condicion ::= valor op_logico valor 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ats(new Object[] {e1,e2,e3}) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // condicion ::= LPAREN condicion RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ats(new Object[] {e1,e2,e3}) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condicion ::= NOT valor 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ats(new Object[] {e1,e2}) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // condicion ::= BOOLEAN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ats(new Object[] {e1}) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // elseif ::= ELSE_IF valor THEN lista_instrucciones elseif 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo tmp = new Nodo("ELSE_IF",e1.toString(),contador++);
            tmp.setNumNodo(contador++);
            tmp.addHijo(new Nodo("condicion",e2.toString(),contador++)) /*terminal*/;
            tmp.addHijo(new Nodo("THEN",e3.toString(),contador++)) /*terminal*/;
            tmp.addHijo((Nodo)e4);
            if(e5 != null  && e5.toString()!=""){
                tmp.addHijo((Nodo)e5);
            }
            RESULT=tmp;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseif",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // elseif ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseif",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // else ::= ELSE lista_instrucciones 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo tmp = new Nodo("ELSE",e1.toString(),contador++);
            tmp.setNumNodo(contador++);
            tmp.addHijo((Nodo)e2);
            RESULT=tmp;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // else ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // if ::= IF valor THEN lista_instrucciones elseif else END_IF 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo tmp = new Nodo("IF",e1.toString(),contador++);
        tmp.setNumNodo(contador++);
        tmp.addHijo(new Nodo("condicion",e2.toString(),contador++)) /*terminal*/;
        tmp.addHijo(new Nodo("THEN",e3.toString(),contador++)) /*terminal*/;
        tmp.addHijo((Nodo)e4);
        if(e5 != null && e5.toString()!=""){
            tmp.addHijo((Nodo)e5); /*No terminal*/
        }
        if(e6 != null && e6.toString()!=""){
            tmp.addHijo((Nodo)e6);
        }
        tmp.addHijo(new Nodo("END_IF",e7.toString(),contador++)) /*terminal*/;
        RESULT=tmp;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // list_case ::= LQUE expr RQUE THEN lista_instrucciones list_case 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Nodo tmp = new Nodo("case",ats(new Object[] {e1,e2,e3,e4}),contador++);
                tmp.setNumNodo(contador++);
                tmp.addHijo((Nodo)e5);
                if(e6 != null && e6.toString()!=""){
                    tmp.addHijo((Nodo)e6);
                }
                RESULT=tmp;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_case",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // list_case ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_case",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // default ::= ELSE THEN lista_instrucciones 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Nodo tmp = new Nodo("default",ats(new Object[] {e1,e2}),contador++);
                tmp.setNumNodo(contador++);
                if(e3 != null && e3.toString()!=""){
                    tmp.addHijo((Nodo)e3);
                }
                RESULT=tmp;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("default",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // default ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("default",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // select_case ::= SELECT expr CASE list_case default END_SELECT 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Nodo tmp = new Nodo("SELECT",e1.toString(),contador++);
                tmp.addHijo(new Nodo("<Valor>",e2.toString(),contador++));
                tmp.addHijo(new Nodo("hacer",e3.toString(),contador++));
                tmp.setNumNodo(contador++);
                if(e4 != null && e4.toString()!=""){
                    tmp.addHijo((Nodo)e4);
                }
                if(e5 != null && e5.toString()!=""){
                    tmp.addHijo((Nodo)e5);
                }
                tmp.addHijo(new Nodo("END_SELECT",e6.toString(),contador++));
                RESULT=tmp;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select_case",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // incremental ::= INCREMENTAL expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT= ats(new Object[] {e2});
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremental",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // incremental ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremental",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // for ::= FOR VARIABLE ASIGNACION expr TO expr incremental CASE lista_instrucciones END_FOR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e8left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e8 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e9left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e9 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e10left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e10right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e10 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Nodo tmp = new Nodo("FOR",e1.toString(),contador++);
            tmp.addHijo(new Nodo("<Variable>",e2.toString(),contador++)) /*terminal*/;
            tmp.addHijo(new Nodo("Asignacion",e3.toString(),contador++)) /*terminal*/;
            tmp.addHijo(new Nodo("<Valor inicial>",e4.toString(),contador++)) /*terminal*/;
            tmp.addHijo(new Nodo("Hasta",e5.toString(),contador++)) /*terminal*/;
            tmp.addHijo(new Nodo("<Valor final>",e6.toString(),contador++)) /*terminal*/;
            if(e7 != null && e7.toString()!=""){
                tmp.addHijo(new Nodo("Incremental",e7.toString(),contador++)) /*terminal*/;
            }
            tmp.addHijo(new Nodo("Hacer",e8.toString(),contador++)) /*terminal*/;
            tmp.addHijo((Nodo) e9) /*no terminal*/;
            tmp.addHijo(new Nodo("<END_FOR>",e10.toString(),contador++)) /*terminal*/;
            RESULT=tmp;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // mientras ::= WHILE valor CASE lista_instrucciones END_WHILE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Nodo tmp = new Nodo("WHILE",e1.toString(),contador++);
                tmp.addHijo(new Nodo("<condicion>",e2.toString(),contador++)) /*terminal*/;
                tmp.addHijo(new Nodo("Hacer",e3.toString(),contador++)) /*terminal*/;
                tmp.addHijo((Nodo) e4) /*no terminal*/;
                tmp.addHijo(new Nodo("END_WHILE",e5.toString(),contador++)) /*terminal*/;
                RESULT=tmp;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mientras",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // repetir ::= REPETIR lista_instrucciones HASTA_QUE valor 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Nodo tmp = new Nodo("REPETIR",e1.toString(),contador++);
                tmp.addHijo((Nodo) e2) /*no terminal*/;
                tmp.addHijo(new Nodo("HASTA_QUE",e3.toString(),contador++)) /*terminal*/;
                tmp.addHijo(new Nodo("<condicion>",e4.toString(),contador++)) /*terminal*/;
                RESULT=tmp;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repetir",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // retorno ::= RETURN valor SEMI_COLON 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= ats(new Object[] {e2}); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // lista_parametros_con_tipo ::= VARIABLE TIPO COMA lista_parametros_con_tipo 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= ats(new Object[] {e1,e2,e3,e4}); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros_con_tipo",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // lista_parametros_con_tipo ::= VARIABLE TIPO 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= ats(new Object[] {e1,e2}); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros_con_tipo",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // lista_parametros_con_tipo ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros_con_tipo",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // con_parametros ::= CON_PARAMETROS LPAREN lista_parametros_con_tipo RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= ats(new Object[] {e1,e2,e3,e4}); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("con_parametros",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // con_parametros ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("con_parametros",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // metodo ::= METODO VARIABLE con_parametros lista_instrucciones FIN_METODO 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Nodo tmp = new Nodo("METODO",e1.toString(),contador++);
                tmp.addHijo(new Nodo("Nombre",e2.toString(),contador++)) /*terminal*/;
                tmp.addHijo(new Nodo("parametros",e3.toString(),contador++)) /*terminal*/;
                tmp.addHijo((Nodo) e4) /*no terminal*/;
                tmp.addHijo(new Nodo("FIN_METODO",e5.toString(),contador++)) /*terminal*/;
                RESULT=tmp;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // funcion ::= FUNCTION VARIABLE TIPO con_parametros lista_instrucciones retorno END_FUNCTION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Nodo tmp = new Nodo("FUNCION",e1.toString(),contador++);
                tmp.addHijo(new Nodo("Nombre",e2.toString(),contador++)) /*terminal*/;
                tmp.addHijo(new Nodo("Tipo",e3.toString(),contador++)) /*terminal*/;
                tmp.addHijo(new Nodo("parametros",e4.toString(),contador++)) /*terminal*/;
                tmp.addHijo((Nodo) e5) /*no terminal*/;
                tmp.addHijo(new Nodo("RETURN",e6.toString(),contador++)) /*terminal*/;
                tmp.addHijo(new Nodo("FIN_FUNCION",e7.toString(),contador++)) /*terminal*/;
                RESULT=tmp;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // lista_parametros ::= valor COMA lista_parametros 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= ats(new Object[] {e1,e2,e3}); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // lista_parametros ::= valor 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= ats(new Object[] {e1}); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // lista_parametros ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ejecutar ::= EJECUTAR VARIABLE LPAREN lista_parametros RPAREN SEMI_COLON 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Nodo tmp = new Nodo("EJECUTAR",e1.toString(),contador++);
                tmp.addHijo(new Nodo("Nombre",e2.toString(),contador++)) /*terminal*/;
                tmp.addHijo(new Nodo("parametros",ats(new Object[] {e3,e4,e5}),contador++)) /*terminal*/;
                tmp.addHijo(new Nodo(";",e6.toString(),contador++)) /*terminal*/;
                RESULT=tmp;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejecutar",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // imprimir ::= IMPRIMIR valor SEMI_COLON 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Nodo tmp = new Nodo("IMPRIMIR",e1.toString(),contador++);
              tmp.addHijo(new Nodo("Valor",e2.toString(),contador++)) /*terminal*/;
              tmp.addHijo(new Nodo(";",e3.toString(),contador++)) /*terminal*/;
              RESULT=tmp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // imprimir ::= IMPRIMIR ejecutar 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Nodo tmp = new Nodo("IMPRIMIR",e1.toString(),contador++);
              tmp.addHijo((Nodo) e2) /*no terminal*/;
              RESULT=tmp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // imprimir ::= IMPRIMIR_SIN_SALTO valor SEMI_COLON 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Nodo tmp = new Nodo("IMPRIMIR_SS",e1.toString(),contador++);
              tmp.addHijo(new Nodo("Valor",e2.toString(),contador++)) /*terminal*/;
              tmp.addHijo(new Nodo(";",e3.toString(),contador++)) /*terminal*/;
              RESULT=tmp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // imprimir ::= IMPRIMIR_SIN_SALTO ejecutar 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Nodo tmp = new Nodo("IMPRIMIR_SS",e1.toString(),contador++);
              tmp.addHijo((Nodo) e2) /*no terminal*/;
              RESULT=tmp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
