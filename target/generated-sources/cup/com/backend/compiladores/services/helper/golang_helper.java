
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.backend.compiladores.services.helper;

import java_cup.runtime.*;
import com.backend.compiladores.services.traductor.*;
import com.backend.compiladores.services.parserPackage.*;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class golang_helper extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return golang_helperSym.class;
}

  /** Default constructor. */
  @Deprecated
  public golang_helper() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public golang_helper(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public golang_helper(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\036\000\002\002\004\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\007\000\002\005\005\000\002" +
    "\005\004\000\002\005\003\000\002\005\003\000\002\011" +
    "\005\000\002\011\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\015\003\000\002\015\003\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\004\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\063\000\022\007\015\014\016\020\011\021\004\022" +
    "\006\023\017\025\010\045\014\001\002\000\030\002\000" +
    "\015\000\031\000\035\000\036\000\037\000\040\000\041" +
    "\000\042\000\043\000\044\000\001\002\000\004\002\065" +
    "\001\002\000\030\002\uffe4\015\uffe4\031\uffe4\035\uffe4\036" +
    "\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4" +
    "\001\002\000\026\002\ufff1\031\063\035\051\036\047\037" +
    "\050\040\046\041\053\042\055\043\056\044\045\001\002" +
    "\000\046\002\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\015\ufff3\017\ufff3\031\ufff3\035\ufff3\036\ufff3" +
    "\037\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\001" +
    "\002\000\046\002\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\015\ufff4\017\ufff4\031\ufff4\035\ufff4\036" +
    "\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4" +
    "\001\002\000\030\002\uffff\015\uffff\031\uffff\035\uffff\036" +
    "\uffff\037\uffff\040\uffff\041\uffff\042\uffff\043\uffff\044\uffff" +
    "\001\002\000\044\002\ufffd\006\027\007\023\010\030\011" +
    "\031\012\025\013\026\015\ufffd\031\ufffd\035\ufffd\036\ufffd" +
    "\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\001" +
    "\002\000\022\007\015\014\016\020\011\021\004\022\006" +
    "\023\017\025\010\045\014\001\002\000\004\020\061\001" +
    "\002\000\022\007\015\014\016\020\011\021\004\022\006" +
    "\023\017\025\010\045\014\001\002\000\030\002\ufffe\015" +
    "\ufffe\031\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe" +
    "\042\ufffe\043\ufffe\044\ufffe\001\002\000\022\035\051\036" +
    "\047\037\050\040\046\041\053\042\055\043\056\044\045" +
    "\001\002\000\024\015\044\035\uffff\036\uffff\037\uffff\040" +
    "\uffff\041\uffff\042\uffff\043\uffff\044\uffff\001\002\000\040" +
    "\006\027\007\023\010\030\011\031\012\025\013\026\015" +
    "\024\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd" +
    "\043\ufffd\044\ufffd\001\002\000\012\007\015\014\032\020" +
    "\011\025\010\001\002\000\046\002\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015\ufff6\017\ufff6\031" +
    "\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6" +
    "\043\ufff6\044\ufff6\001\002\000\004\016\040\001\002\000" +
    "\012\007\015\014\032\020\011\025\010\001\002\000\012" +
    "\007\015\014\032\020\011\025\010\001\002\000\012\007" +
    "\015\014\032\020\011\025\010\001\002\000\012\007\015" +
    "\014\032\020\011\025\010\001\002\000\012\007\015\014" +
    "\032\020\011\025\010\001\002\000\046\002\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\011\ufff9\012\025\013\ufff9\015\ufff9\017" +
    "\ufff9\031\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\001\002\000\020\006\027\007" +
    "\023\010\030\011\031\012\025\013\026\015\024\001\002" +
    "\000\046\002\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012" +
    "\025\013\ufffa\015\ufffa\017\ufffa\031\ufffa\035\ufffa\036\ufffa" +
    "\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\001" +
    "\002\000\046\002\ufffc\006\ufffc\007\ufffc\010\030\011\031" +
    "\012\025\013\026\015\ufffc\017\ufffc\031\ufffc\035\ufffc\036" +
    "\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc" +
    "\001\002\000\046\002\ufff8\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\012\025\013\ufff8\015\ufff8\017\ufff8\031\ufff8\035\ufff8" +
    "\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044" +
    "\ufff8\001\002\000\012\007\015\014\032\020\011\025\010" +
    "\001\002\000\020\006\027\007\023\010\030\011\031\012" +
    "\025\013\026\017\042\001\002\000\046\002\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\015\ufff7\017" +
    "\ufff7\031\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7" +
    "\042\ufff7\043\ufff7\044\ufff7\001\002\000\046\002\ufffb\006" +
    "\ufffb\007\ufffb\010\030\011\031\012\025\013\026\015\ufffb" +
    "\017\ufffb\031\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\044\ufffb\001\002\000\030\002\uffe6" +
    "\015\uffe6\031\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041" +
    "\uffe6\042\uffe6\043\uffe6\044\uffe6\001\002\000\022\007\uffe9" +
    "\014\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\025\uffe9\045" +
    "\uffe9\001\002\000\022\007\uffed\014\uffed\020\uffed\021\uffed" +
    "\022\uffed\023\uffed\025\uffed\045\uffed\001\002\000\022\007" +
    "\uffef\014\uffef\020\uffef\021\uffef\022\uffef\023\uffef\025\uffef" +
    "\045\uffef\001\002\000\022\007\uffee\014\uffee\020\uffee\021" +
    "\uffee\022\uffee\023\uffee\025\uffee\045\uffee\001\002\000\022" +
    "\007\ufff0\014\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\025" +
    "\ufff0\045\ufff0\001\002\000\022\007\015\014\016\020\011" +
    "\021\004\022\006\023\017\025\010\045\014\001\002\000" +
    "\022\007\uffec\014\uffec\020\uffec\021\uffec\022\uffec\023\uffec" +
    "\025\uffec\045\uffec\001\002\000\022\007\015\014\016\020" +
    "\011\021\004\022\006\023\017\025\010\045\014\001\002" +
    "\000\022\007\uffeb\014\uffeb\020\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\025\uffeb\045\uffeb\001\002\000\022\007\uffea\014\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\025\uffea\045\uffea\001" +
    "\002\000\030\002\uffe8\015\uffe8\031\uffe8\035\051\036\047" +
    "\037\050\040\046\041\053\042\055\043\056\044\045\001" +
    "\002\000\030\002\uffe7\015\uffe7\031\uffe7\035\051\036\047" +
    "\037\050\040\046\041\053\042\055\043\056\044\045\001" +
    "\002\000\046\002\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\015\ufff5\017\ufff5\031\ufff5\035\ufff5\036" +
    "\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5" +
    "\001\002\000\030\002\uffe5\015\uffe5\031\uffe5\035\uffe5\036" +
    "\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5" +
    "\001\002\000\022\007\015\014\016\020\011\021\004\022" +
    "\006\023\017\025\010\045\014\001\002\000\004\002\ufff2" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\063\000\012\005\012\006\006\011\004\013\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\053\015\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\012\006\061\013\011\001\001\000\002\001\001\000" +
    "\010\005\021\006\017\013\020\001\001\000\002\001\001" +
    "\000\006\014\053\015\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\036\001\001\000\004\005" +
    "\035\001\001\000\004\005\034\001\001\000\004\005\032" +
    "\001\001\000\004\005\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\012\006\057\013\011" +
    "\001\001\000\002\001\001\000\010\005\012\006\056\013" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\053\015\051\001\001\000\006\014\053\015\051\001" +
    "\001\000\002\001\001\000\006\014\053\015\051\001\001" +
    "\000\012\005\012\006\006\011\063\013\011\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$golang_helper$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$golang_helper$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$golang_helper$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



//HACER CASO OMISO A ESTOS ERRORES SI ESTAS USANDO INTELLIJ
//Reescritura de los metodos nativos de CUP para mi conveniencia
    public Symbol s;
    public LinkedList<String> p_list = new LinkedList();
    public String valor="";

    //Asigna el token de error para despues poder sacarlo con el get
    public void syntax_error(Symbol s){
        this.s = s;
        this.report_expected_token_ids();
    }

    //Sacamos el token que da error
    public Symbol getSymbolError(){
        return this.s;

    }


    //CUP nos da una lista de los posibles token que se esperaban
    protected void report_expected_token_ids() {
        List<Integer> ids = this.expected_token_ids();
        LinkedList<String> list = new LinkedList();
        Iterator var3 = ids.iterator();

        while(var3.hasNext()) {
            Integer expected = (Integer)var3.next();
            list.add(this.symbl_name_from_id(expected));
        }

        this.p_list=list;
    }

    //Sacamos esa lista
    public LinkedList<String> getExpectedTokens(){
            return this.p_list;
    }

    //-----------------------------------------------------------

    public Ast ast = new Ast();
    public long contador = 1;

    /*ARRAY OF OBJECT TO STRING = ats*/
    private String ats(Object[] array){
        String answer = "";

        for(int i = 0; i < array.length; i++) {
          answer+= array[i].toString();
        }

        return answer;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$golang_helper$actions {
  private final golang_helper parser;

  /** Constructor */
  CUP$golang_helper$actions(golang_helper parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$golang_helper$do_action_part00000000(
    int                        CUP$golang_helper$act_num,
    java_cup.runtime.lr_parser CUP$golang_helper$parser,
    java.util.Stack            CUP$golang_helper$stack,
    int                        CUP$golang_helper$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$golang_helper$result;

      /* select the action based on the action number */
      switch (CUP$golang_helper$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= lista_valores EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).value;
		RESULT = start_val;
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$golang_helper$parser.done_parsing();
          return CUP$golang_helper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // valor ::= CADENA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.peek()).value;
		 RESULT =  ats(new Object[] {e1}) ; 
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("valor",4, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          return CUP$golang_helper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // valor ::= condicion 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.peek()).value;
		 RESULT = ats(new Object[] {e2}) ; 
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("valor",4, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          return CUP$golang_helper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // valor ::= CARACTER 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.peek()).value;
		 RESULT = ats(new Object[] {e3}) ; 
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("valor",4, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          return CUP$golang_helper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // valor ::= expr 
            {
              Object RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.peek()).value;
		 RESULT = ats(new Object[] {e4}) ; 
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("valor",4, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          return CUP$golang_helper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= expr SUMA expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.peek()).value;
		RESULT = ats(new Object[] {e1,e2,e3}) ;
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          return CUP$golang_helper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr RESTA expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.peek()).value;
		RESULT = ats(new Object[] {e1,e2,e3}) ;
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          return CUP$golang_helper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr MULTI expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.peek()).value;
		RESULT = ats(new Object[] {e1,e2,e3}) ;
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          return CUP$golang_helper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr DIVI expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.peek()).value;
		RESULT = ats(new Object[] {e1,e2,e3}) ;
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          return CUP$golang_helper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr MODULO expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.peek()).value;
		RESULT = ats(new Object[] {e1,e2,e3}) ;
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          return CUP$golang_helper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= expr POTENCIA LCOR expr RCOR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.peek()).value;
		RESULT = "math.Pow(float64("+e1.toString() + "),float64(" + e4.toString() + "))" ;
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-4)), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          return CUP$golang_helper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.peek()).value;
		RESULT = ats(new Object[] {e1,e2,e3}) ;
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          return CUP$golang_helper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= RESTA NUMERO 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.peek()).value;
		RESULT = ats(new Object[] {e1,e2}) ;
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          return CUP$golang_helper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= NUMERO 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.peek()).value;
		 RESULT = ats(new Object[] {e1}) ; 
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          return CUP$golang_helper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= VARIABLE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.peek()).value;
		 RESULT = ats(new Object[] {e1}) ; 
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          return CUP$golang_helper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_valores ::= valor COMA lista_valores 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.peek()).value;
		 valor = ats(new Object[] {e1,e2,e3}) ;
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("lista_valores",7, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          return CUP$golang_helper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_valores ::= valor 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.peek()).value;
		 valor =  ats(new Object[] {e1}) ;
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("lista_valores",7, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          return CUP$golang_helper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // op_relacional ::= MAYOR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.peek()).value;
		RESULT = ats(new Object[] {e1}) ;
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("op_relacional",10, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          return CUP$golang_helper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // op_relacional ::= MENOR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.peek()).value;
		RESULT = ats(new Object[] {e1}) ;
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("op_relacional",10, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          return CUP$golang_helper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // op_relacional ::= MAYORIGUAL 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.peek()).value;
		RESULT = ats(new Object[] {e1}) ;
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("op_relacional",10, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          return CUP$golang_helper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // op_relacional ::= MENORIGUAL 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.peek()).value;
		RESULT = ats(new Object[] {e1}) ;
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("op_relacional",10, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          return CUP$golang_helper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // op_relacional ::= IGUAL 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.peek()).value;
		RESULT = ats(new Object[] {e1}) ;
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("op_relacional",10, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          return CUP$golang_helper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // op_relacional ::= DIFERENTE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.peek()).value;
		RESULT = ats(new Object[] {e1}) ;
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("op_relacional",10, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          return CUP$golang_helper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // op_logico ::= OR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.peek()).value;
		RESULT = ats(new Object[] {e1}) ;
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("op_logico",11, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          return CUP$golang_helper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // op_logico ::= AND 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.peek()).value;
		RESULT = ats(new Object[] {e1}) ;
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("op_logico",11, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          return CUP$golang_helper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // condicion ::= valor op_relacional valor 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.peek()).value;
		RESULT = ats(new Object[] {e1,e2,e3}) ;
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          return CUP$golang_helper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condicion ::= valor op_logico valor 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.peek()).value;
		RESULT = ats(new Object[] {e1,e2,e3}) ;
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          return CUP$golang_helper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condicion ::= LPAREN condicion RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.peek()).value;
		RESULT = ats(new Object[] {e1,e2,e3}) ;
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-2)), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          return CUP$golang_helper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condicion ::= NOT valor 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.peek()).value;
		RESULT = ats(new Object[] {e1,e2}) ;
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.elementAt(CUP$golang_helper$top-1)), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          return CUP$golang_helper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condicion ::= BOOLEAN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$golang_helper$stack.peek()).value;
		RESULT = ats(new Object[] {e1}) ;
              CUP$golang_helper$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), ((java_cup.runtime.Symbol)CUP$golang_helper$stack.peek()), RESULT);
            }
          return CUP$golang_helper$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$golang_helper$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$golang_helper$do_action(
    int                        CUP$golang_helper$act_num,
    java_cup.runtime.lr_parser CUP$golang_helper$parser,
    java.util.Stack            CUP$golang_helper$stack,
    int                        CUP$golang_helper$top)
    throws java.lang.Exception
    {
              return CUP$golang_helper$do_action_part00000000(
                               CUP$golang_helper$act_num,
                               CUP$golang_helper$parser,
                               CUP$golang_helper$stack,
                               CUP$golang_helper$top);
    }
}

}
